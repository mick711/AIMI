// Generated by view binder compiler. Do not edit!
package info.nightscout.androidaps.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import info.nightscout.androidaps.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ConfigbuilderSinglePluginBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView pluginDescription;

  @NonNull
  public final RadioButton pluginEnabledExclusive;

  @NonNull
  public final CheckBox pluginEnabledInclusive;

  @NonNull
  public final ImageView pluginIcon;

  @NonNull
  public final TextView pluginName;

  @NonNull
  public final ImageButton pluginPreferences;

  @NonNull
  public final CheckBox pluginVisibility;

  private ConfigbuilderSinglePluginBinding(@NonNull LinearLayout rootView,
      @NonNull TextView pluginDescription, @NonNull RadioButton pluginEnabledExclusive,
      @NonNull CheckBox pluginEnabledInclusive, @NonNull ImageView pluginIcon,
      @NonNull TextView pluginName, @NonNull ImageButton pluginPreferences,
      @NonNull CheckBox pluginVisibility) {
    this.rootView = rootView;
    this.pluginDescription = pluginDescription;
    this.pluginEnabledExclusive = pluginEnabledExclusive;
    this.pluginEnabledInclusive = pluginEnabledInclusive;
    this.pluginIcon = pluginIcon;
    this.pluginName = pluginName;
    this.pluginPreferences = pluginPreferences;
    this.pluginVisibility = pluginVisibility;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ConfigbuilderSinglePluginBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ConfigbuilderSinglePluginBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.configbuilder_single_plugin, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ConfigbuilderSinglePluginBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.plugin_description;
      TextView pluginDescription = rootView.findViewById(id);
      if (pluginDescription == null) {
        break missingId;
      }

      id = R.id.plugin_enabled_exclusive;
      RadioButton pluginEnabledExclusive = rootView.findViewById(id);
      if (pluginEnabledExclusive == null) {
        break missingId;
      }

      id = R.id.plugin_enabled_inclusive;
      CheckBox pluginEnabledInclusive = rootView.findViewById(id);
      if (pluginEnabledInclusive == null) {
        break missingId;
      }

      id = R.id.plugin_icon;
      ImageView pluginIcon = rootView.findViewById(id);
      if (pluginIcon == null) {
        break missingId;
      }

      id = R.id.plugin_name;
      TextView pluginName = rootView.findViewById(id);
      if (pluginName == null) {
        break missingId;
      }

      id = R.id.plugin_preferences;
      ImageButton pluginPreferences = rootView.findViewById(id);
      if (pluginPreferences == null) {
        break missingId;
      }

      id = R.id.plugin_visibility;
      CheckBox pluginVisibility = rootView.findViewById(id);
      if (pluginVisibility == null) {
        break missingId;
      }

      return new ConfigbuilderSinglePluginBinding((LinearLayout) rootView, pluginDescription,
          pluginEnabledExclusive, pluginEnabledInclusive, pluginIcon, pluginName, pluginPreferences,
          pluginVisibility);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
