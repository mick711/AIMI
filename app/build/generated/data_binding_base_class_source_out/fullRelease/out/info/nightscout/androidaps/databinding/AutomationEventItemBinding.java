// Generated by view binder compiler. Do not edit!
package info.nightscout.androidaps.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import info.nightscout.androidaps.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AutomationEventItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView aapsLogo;

  @NonNull
  public final CheckBox enabled;

  @NonNull
  public final TextView eventTitle;

  @NonNull
  public final LinearLayout iconLayout;

  @NonNull
  public final ImageView iconSort;

  @NonNull
  public final ImageView iconTrash;

  @NonNull
  public final ConstraintLayout rootLayout;

  private AutomationEventItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView aapsLogo, @NonNull CheckBox enabled, @NonNull TextView eventTitle,
      @NonNull LinearLayout iconLayout, @NonNull ImageView iconSort, @NonNull ImageView iconTrash,
      @NonNull ConstraintLayout rootLayout) {
    this.rootView = rootView;
    this.aapsLogo = aapsLogo;
    this.enabled = enabled;
    this.eventTitle = eventTitle;
    this.iconLayout = iconLayout;
    this.iconSort = iconSort;
    this.iconTrash = iconTrash;
    this.rootLayout = rootLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AutomationEventItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AutomationEventItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.automation_event_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AutomationEventItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.aapsLogo;
      ImageView aapsLogo = rootView.findViewById(id);
      if (aapsLogo == null) {
        break missingId;
      }

      id = R.id.enabled;
      CheckBox enabled = rootView.findViewById(id);
      if (enabled == null) {
        break missingId;
      }

      id = R.id.eventTitle;
      TextView eventTitle = rootView.findViewById(id);
      if (eventTitle == null) {
        break missingId;
      }

      id = R.id.iconLayout;
      LinearLayout iconLayout = rootView.findViewById(id);
      if (iconLayout == null) {
        break missingId;
      }

      id = R.id.iconSort;
      ImageView iconSort = rootView.findViewById(id);
      if (iconSort == null) {
        break missingId;
      }

      id = R.id.iconTrash;
      ImageView iconTrash = rootView.findViewById(id);
      if (iconTrash == null) {
        break missingId;
      }

      ConstraintLayout rootLayout = (ConstraintLayout) rootView;

      return new AutomationEventItemBinding((ConstraintLayout) rootView, aapsLogo, enabled,
          eventTitle, iconLayout, iconSort, iconTrash, rootLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
