// Generated by view binder compiler. Do not edit!
package info.nightscout.androidaps.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.textfield.TextInputEditText;
import info.nightscout.androidaps.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AutomationDialogEventBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final ImageView actionImage;

  @NonNull
  public final RecyclerView actionListView;

  @NonNull
  public final TextView addAction;

  @NonNull
  public final TextView editTrigger;

  @NonNull
  public final TextView forcedTriggerDescription;

  @NonNull
  public final TextView forcedTriggerDescriptionLabel;

  @NonNull
  public final TextInputEditText inputEventTitle;

  @NonNull
  public final OkcancelBinding okcancel;

  @NonNull
  public final LinearLayout spacer;

  @NonNull
  public final TextView triggerDescription;

  @NonNull
  public final ImageView triggerImage;

  private AutomationDialogEventBinding(@NonNull ScrollView rootView, @NonNull ImageView actionImage,
      @NonNull RecyclerView actionListView, @NonNull TextView addAction,
      @NonNull TextView editTrigger, @NonNull TextView forcedTriggerDescription,
      @NonNull TextView forcedTriggerDescriptionLabel, @NonNull TextInputEditText inputEventTitle,
      @NonNull OkcancelBinding okcancel, @NonNull LinearLayout spacer,
      @NonNull TextView triggerDescription, @NonNull ImageView triggerImage) {
    this.rootView = rootView;
    this.actionImage = actionImage;
    this.actionListView = actionListView;
    this.addAction = addAction;
    this.editTrigger = editTrigger;
    this.forcedTriggerDescription = forcedTriggerDescription;
    this.forcedTriggerDescriptionLabel = forcedTriggerDescriptionLabel;
    this.inputEventTitle = inputEventTitle;
    this.okcancel = okcancel;
    this.spacer = spacer;
    this.triggerDescription = triggerDescription;
    this.triggerImage = triggerImage;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static AutomationDialogEventBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AutomationDialogEventBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.automation_dialog_event, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AutomationDialogEventBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.action_image;
      ImageView actionImage = rootView.findViewById(id);
      if (actionImage == null) {
        break missingId;
      }

      id = R.id.actionListView;
      RecyclerView actionListView = rootView.findViewById(id);
      if (actionListView == null) {
        break missingId;
      }

      id = R.id.addAction;
      TextView addAction = rootView.findViewById(id);
      if (addAction == null) {
        break missingId;
      }

      id = R.id.editTrigger;
      TextView editTrigger = rootView.findViewById(id);
      if (editTrigger == null) {
        break missingId;
      }

      id = R.id.forcedTriggerDescription;
      TextView forcedTriggerDescription = rootView.findViewById(id);
      if (forcedTriggerDescription == null) {
        break missingId;
      }

      id = R.id.forcedTriggerDescriptionLabel;
      TextView forcedTriggerDescriptionLabel = rootView.findViewById(id);
      if (forcedTriggerDescriptionLabel == null) {
        break missingId;
      }

      id = R.id.inputEventTitle;
      TextInputEditText inputEventTitle = rootView.findViewById(id);
      if (inputEventTitle == null) {
        break missingId;
      }

      id = R.id.okcancel;
      View okcancel = rootView.findViewById(id);
      if (okcancel == null) {
        break missingId;
      }
      OkcancelBinding binding_okcancel = OkcancelBinding.bind(okcancel);

      id = R.id.spacer;
      LinearLayout spacer = rootView.findViewById(id);
      if (spacer == null) {
        break missingId;
      }

      id = R.id.triggerDescription;
      TextView triggerDescription = rootView.findViewById(id);
      if (triggerDescription == null) {
        break missingId;
      }

      id = R.id.trigger_image;
      ImageView triggerImage = rootView.findViewById(id);
      if (triggerImage == null) {
        break missingId;
      }

      return new AutomationDialogEventBinding((ScrollView) rootView, actionImage, actionListView,
          addAction, editTrigger, forcedTriggerDescription, forcedTriggerDescriptionLabel,
          inputEventTitle, binding_okcancel, spacer, triggerDescription, triggerImage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
