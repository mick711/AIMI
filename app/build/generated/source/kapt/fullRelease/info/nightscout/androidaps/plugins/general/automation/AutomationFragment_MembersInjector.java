// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.automation;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.HasAndroidInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AutomationFragment_MembersInjector implements MembersInjector<AutomationFragment> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<AutomationPlugin> automationPluginProvider;

  private final Provider<HasAndroidInjector> injectorProvider;

  public AutomationFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<AutomationPlugin> automationPluginProvider,
      Provider<HasAndroidInjector> injectorProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.rxBusProvider = rxBusProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.automationPluginProvider = automationPluginProvider;
    this.injectorProvider = injectorProvider;
  }

  public static MembersInjector<AutomationFragment> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<AutomationPlugin> automationPluginProvider,
      Provider<HasAndroidInjector> injectorProvider) {
    return new AutomationFragment_MembersInjector(androidInjectorProvider, resourceHelperProvider, rxBusProvider, fabricPrivacyProvider, automationPluginProvider, injectorProvider);
  }

  @Override
  public void injectMembers(AutomationFragment instance) {
    DaggerFragment_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectAutomationPlugin(instance, automationPluginProvider.get());
    injectInjector(instance, injectorProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.automation.AutomationFragment.resourceHelper")
  public static void injectResourceHelper(AutomationFragment instance,
      ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.automation.AutomationFragment.rxBus")
  public static void injectRxBus(AutomationFragment instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.automation.AutomationFragment.fabricPrivacy")
  public static void injectFabricPrivacy(AutomationFragment instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.automation.AutomationFragment.automationPlugin")
  public static void injectAutomationPlugin(AutomationFragment instance,
      AutomationPlugin automationPlugin) {
    instance.automationPlugin = automationPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.automation.AutomationFragment.injector")
  public static void injectInjector(AutomationFragment instance, HasAndroidInjector injector) {
    instance.injector = injector;
  }
}
