// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.nsclient;

import android.content.Context;
import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.buildHelper.BuildHelper;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NSClientPlugin_Factory implements Factory<NSClientPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<Context> contextProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<SP> spProvider;

  private final Provider<NsClientReceiverDelegate> nsClientReceiverDelegateProvider;

  private final Provider<Config> configProvider;

  private final Provider<BuildHelper> buildHelperProvider;

  public NSClientPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<Context> contextProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<SP> spProvider,
      Provider<NsClientReceiverDelegate> nsClientReceiverDelegateProvider,
      Provider<Config> configProvider, Provider<BuildHelper> buildHelperProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.contextProvider = contextProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.spProvider = spProvider;
    this.nsClientReceiverDelegateProvider = nsClientReceiverDelegateProvider;
    this.configProvider = configProvider;
    this.buildHelperProvider = buildHelperProvider;
  }

  @Override
  public NSClientPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), rxBusProvider.get(), resourceHelperProvider.get(), contextProvider.get(), fabricPrivacyProvider.get(), spProvider.get(), nsClientReceiverDelegateProvider.get(), configProvider.get(), buildHelperProvider.get());
  }

  public static NSClientPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<Context> contextProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<SP> spProvider,
      Provider<NsClientReceiverDelegate> nsClientReceiverDelegateProvider,
      Provider<Config> configProvider, Provider<BuildHelper> buildHelperProvider) {
    return new NSClientPlugin_Factory(injectorProvider, aapsLoggerProvider, rxBusProvider, resourceHelperProvider, contextProvider, fabricPrivacyProvider, spProvider, nsClientReceiverDelegateProvider, configProvider, buildHelperProvider);
  }

  public static NSClientPlugin newInstance(HasAndroidInjector injector, AAPSLogger aapsLogger,
      RxBusWrapper rxBus, ResourceHelper resourceHelper, Context context,
      FabricPrivacy fabricPrivacy, SP sp, Object nsClientReceiverDelegate, Config config,
      BuildHelper buildHelper) {
    return new NSClientPlugin(injector, aapsLogger, rxBus, resourceHelper, context, fabricPrivacy, sp, (NsClientReceiverDelegate) nsClientReceiverDelegate, config, buildHelper);
  }
}
