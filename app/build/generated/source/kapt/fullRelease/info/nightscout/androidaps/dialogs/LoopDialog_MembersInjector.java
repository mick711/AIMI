// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.dialogs;

import android.content.Context;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerDialogFragment_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.CommandQueueProvider;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderPlugin;
import info.nightscout.androidaps.plugins.configBuilder.ConstraintChecker;
import info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesPlugin;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoopDialog_MembersInjector implements MembersInjector<LoopDialog> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<Context> ctxProvider;

  private final Provider<SP> spProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<ObjectivesPlugin> objectivesPluginProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<ConstraintChecker> constraintCheckerProvider;

  private final Provider<CommandQueueProvider> commandQueueProvider;

  private final Provider<ConfigBuilderPlugin> configBuilderPluginProvider;

  public LoopDialog_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<Context> ctxProvider,
      Provider<SP> spProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<ObjectivesPlugin> objectivesPluginProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<CommandQueueProvider> commandQueueProvider,
      Provider<ConfigBuilderPlugin> configBuilderPluginProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.ctxProvider = ctxProvider;
    this.spProvider = spProvider;
    this.rxBusProvider = rxBusProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.objectivesPluginProvider = objectivesPluginProvider;
    this.activePluginProvider = activePluginProvider;
    this.constraintCheckerProvider = constraintCheckerProvider;
    this.commandQueueProvider = commandQueueProvider;
    this.configBuilderPluginProvider = configBuilderPluginProvider;
  }

  public static MembersInjector<LoopDialog> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<Context> ctxProvider,
      Provider<SP> spProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<ObjectivesPlugin> objectivesPluginProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<CommandQueueProvider> commandQueueProvider,
      Provider<ConfigBuilderPlugin> configBuilderPluginProvider) {
    return new LoopDialog_MembersInjector(androidInjectorProvider, aapsLoggerProvider, ctxProvider, spProvider, rxBusProvider, fabricPrivacyProvider, resourceHelperProvider, profileFunctionProvider, loopPluginProvider, objectivesPluginProvider, activePluginProvider, constraintCheckerProvider, commandQueueProvider, configBuilderPluginProvider);
  }

  @Override
  public void injectMembers(LoopDialog instance) {
    DaggerDialogFragment_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectCtx(instance, ctxProvider.get());
    injectSp(instance, spProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectProfileFunction(instance, profileFunctionProvider.get());
    injectLoopPlugin(instance, loopPluginProvider.get());
    injectObjectivesPlugin(instance, objectivesPluginProvider.get());
    injectActivePlugin(instance, activePluginProvider.get());
    injectConstraintChecker(instance, constraintCheckerProvider.get());
    injectCommandQueue(instance, commandQueueProvider.get());
    injectConfigBuilderPlugin(instance, configBuilderPluginProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.aapsLogger")
  public static void injectAapsLogger(LoopDialog instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.ctx")
  public static void injectCtx(LoopDialog instance, Context ctx) {
    instance.ctx = ctx;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.sp")
  public static void injectSp(LoopDialog instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.rxBus")
  public static void injectRxBus(LoopDialog instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.fabricPrivacy")
  public static void injectFabricPrivacy(LoopDialog instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.resourceHelper")
  public static void injectResourceHelper(LoopDialog instance, ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.profileFunction")
  public static void injectProfileFunction(LoopDialog instance, ProfileFunction profileFunction) {
    instance.profileFunction = profileFunction;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.loopPlugin")
  public static void injectLoopPlugin(LoopDialog instance, LoopPlugin loopPlugin) {
    instance.loopPlugin = loopPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.objectivesPlugin")
  public static void injectObjectivesPlugin(LoopDialog instance,
      ObjectivesPlugin objectivesPlugin) {
    instance.objectivesPlugin = objectivesPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.activePlugin")
  public static void injectActivePlugin(LoopDialog instance, ActivePluginProvider activePlugin) {
    instance.activePlugin = activePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.constraintChecker")
  public static void injectConstraintChecker(LoopDialog instance,
      ConstraintChecker constraintChecker) {
    instance.constraintChecker = constraintChecker;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.commandQueue")
  public static void injectCommandQueue(LoopDialog instance, CommandQueueProvider commandQueue) {
    instance.commandQueue = commandQueue;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.dialogs.LoopDialog.configBuilderPlugin")
  public static void injectConfigBuilderPlugin(LoopDialog instance,
      ConfigBuilderPlugin configBuilderPlugin) {
    instance.configBuilderPlugin = configBuilderPlugin;
  }
}
