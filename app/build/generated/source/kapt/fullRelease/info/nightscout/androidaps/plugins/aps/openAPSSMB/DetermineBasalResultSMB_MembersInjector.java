// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.aps.openAPSSMB;

import dagger.MembersInjector;
import dagger.android.HasAndroidInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.interfaces.TreatmentsInterface;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.APSResult_MembersInjector;
import info.nightscout.androidaps.plugins.configBuilder.ConstraintChecker;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DetermineBasalResultSMB_MembersInjector implements MembersInjector<DetermineBasalResultSMB> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ConstraintChecker> constraintCheckerProvider;

  private final Provider<SP> spProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<TreatmentsInterface> treatmentsPluginProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider2;

  public DetermineBasalResultSMB_MembersInjector(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider,
      Provider<ConstraintChecker> constraintCheckerProvider, Provider<SP> spProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<TreatmentsInterface> treatmentsPluginProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider2) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.constraintCheckerProvider = constraintCheckerProvider;
    this.spProvider = spProvider;
    this.activePluginProvider = activePluginProvider;
    this.treatmentsPluginProvider = treatmentsPluginProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider2 = spProvider2;
  }

  public static MembersInjector<DetermineBasalResultSMB> create(
      Provider<HasAndroidInjector> injectorProvider, Provider<AAPSLogger> aapsLoggerProvider,
      Provider<ConstraintChecker> constraintCheckerProvider, Provider<SP> spProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<TreatmentsInterface> treatmentsPluginProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider2) {
    return new DetermineBasalResultSMB_MembersInjector(injectorProvider, aapsLoggerProvider, constraintCheckerProvider, spProvider, activePluginProvider, treatmentsPluginProvider, profileFunctionProvider, resourceHelperProvider, spProvider2);
  }

  @Override
  public void injectMembers(DetermineBasalResultSMB instance) {
    APSResult_MembersInjector.injectInjector(instance, injectorProvider.get());
    APSResult_MembersInjector.injectAapsLogger(instance, aapsLoggerProvider.get());
    APSResult_MembersInjector.injectConstraintChecker(instance, constraintCheckerProvider.get());
    APSResult_MembersInjector.injectSp(instance, spProvider.get());
    APSResult_MembersInjector.injectActivePlugin(instance, activePluginProvider.get());
    APSResult_MembersInjector.injectTreatmentsPlugin(instance, treatmentsPluginProvider.get());
    APSResult_MembersInjector.injectProfileFunction(instance, profileFunctionProvider.get());
    APSResult_MembersInjector.injectResourceHelper(instance, resourceHelperProvider.get());
    injectSp(instance, spProvider2.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.aps.openAPSSMB.DetermineBasalResultSMB.sp")
  public static void injectSp(DetermineBasalResultSMB instance, SP sp) {
    instance.sp = sp;
  }
}
