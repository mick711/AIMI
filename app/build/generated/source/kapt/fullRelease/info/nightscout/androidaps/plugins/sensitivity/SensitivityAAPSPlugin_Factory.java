// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.sensitivity;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SensitivityAAPSPlugin_Factory implements Factory<SensitivityAAPSPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<DateUtil> dateUtilProvider;

  public SensitivityAAPSPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<ProfileFunction> profileFunctionProvider,
      Provider<DateUtil> dateUtilProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.dateUtilProvider = dateUtilProvider;
  }

  @Override
  public SensitivityAAPSPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), resourceHelperProvider.get(), spProvider.get(), profileFunctionProvider.get(), dateUtilProvider.get());
  }

  public static SensitivityAAPSPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<ProfileFunction> profileFunctionProvider,
      Provider<DateUtil> dateUtilProvider) {
    return new SensitivityAAPSPlugin_Factory(injectorProvider, aapsLoggerProvider, resourceHelperProvider, spProvider, profileFunctionProvider, dateUtilProvider);
  }

  public static SensitivityAAPSPlugin newInstance(HasAndroidInjector injector,
      AAPSLogger aapsLogger, ResourceHelper resourceHelper, SP sp, ProfileFunction profileFunction,
      DateUtil dateUtil) {
    return new SensitivityAAPSPlugin(injector, aapsLogger, resourceHelper, sp, profileFunction, dateUtil);
  }
}
