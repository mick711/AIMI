// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.aps.loop;

import android.content.Context;
import dagger.Lazy;
import dagger.android.HasAndroidInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.CommandQueueProvider;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.configBuilder.ConstraintChecker;
import info.nightscout.androidaps.plugins.general.nsclient.NSUpload;
import info.nightscout.androidaps.plugins.general.wear.ActionStringHandler;
import info.nightscout.androidaps.plugins.iob.iobCobCalculator.IobCobCalculatorPlugin;
import info.nightscout.androidaps.plugins.pump.virtual.VirtualPumpPlugin;
import info.nightscout.androidaps.plugins.treatments.TreatmentsPlugin;
import info.nightscout.androidaps.receivers.ReceiverStatusStore;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.HardLimits;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoopPlugin_Factory implements Factory<LoopPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<SP> spProvider;

  private final Provider<Config> configProvider;

  private final Provider<ConstraintChecker> constraintCheckerProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<Context> contextProvider;

  private final Provider<CommandQueueProvider> commandQueueProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<TreatmentsPlugin> treatmentsPluginProvider;

  private final Provider<VirtualPumpPlugin> virtualPumpPluginProvider;

  private final Provider<ActionStringHandler> actionStringHandlerProvider;

  private final Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider;

  private final Provider<ReceiverStatusStore> receiverStatusStoreProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<NSUpload> nsUploadProvider;

  private final Provider<HardLimits> hardLimitsProvider;

  public LoopPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<SP> spProvider, Provider<Config> configProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<Context> contextProvider,
      Provider<CommandQueueProvider> commandQueueProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider,
      Provider<VirtualPumpPlugin> virtualPumpPluginProvider,
      Provider<ActionStringHandler> actionStringHandlerProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<ReceiverStatusStore> receiverStatusStoreProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<NSUpload> nsUploadProvider,
      Provider<HardLimits> hardLimitsProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.spProvider = spProvider;
    this.configProvider = configProvider;
    this.constraintCheckerProvider = constraintCheckerProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.contextProvider = contextProvider;
    this.commandQueueProvider = commandQueueProvider;
    this.activePluginProvider = activePluginProvider;
    this.treatmentsPluginProvider = treatmentsPluginProvider;
    this.virtualPumpPluginProvider = virtualPumpPluginProvider;
    this.actionStringHandlerProvider = actionStringHandlerProvider;
    this.iobCobCalculatorPluginProvider = iobCobCalculatorPluginProvider;
    this.receiverStatusStoreProvider = receiverStatusStoreProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.nsUploadProvider = nsUploadProvider;
    this.hardLimitsProvider = hardLimitsProvider;
  }

  @Override
  public LoopPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), rxBusProvider.get(), spProvider.get(), configProvider.get(), constraintCheckerProvider.get(), resourceHelperProvider.get(), profileFunctionProvider.get(), contextProvider.get(), commandQueueProvider.get(), activePluginProvider.get(), treatmentsPluginProvider.get(), virtualPumpPluginProvider.get(), DoubleCheck.lazy(actionStringHandlerProvider), iobCobCalculatorPluginProvider.get(), receiverStatusStoreProvider.get(), fabricPrivacyProvider.get(), nsUploadProvider.get(), hardLimitsProvider.get());
  }

  public static LoopPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<SP> spProvider, Provider<Config> configProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<Context> contextProvider,
      Provider<CommandQueueProvider> commandQueueProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider,
      Provider<VirtualPumpPlugin> virtualPumpPluginProvider,
      Provider<ActionStringHandler> actionStringHandlerProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<ReceiverStatusStore> receiverStatusStoreProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<NSUpload> nsUploadProvider,
      Provider<HardLimits> hardLimitsProvider) {
    return new LoopPlugin_Factory(injectorProvider, aapsLoggerProvider, rxBusProvider, spProvider, configProvider, constraintCheckerProvider, resourceHelperProvider, profileFunctionProvider, contextProvider, commandQueueProvider, activePluginProvider, treatmentsPluginProvider, virtualPumpPluginProvider, actionStringHandlerProvider, iobCobCalculatorPluginProvider, receiverStatusStoreProvider, fabricPrivacyProvider, nsUploadProvider, hardLimitsProvider);
  }

  public static LoopPlugin newInstance(HasAndroidInjector injector, AAPSLogger aapsLogger,
      RxBusWrapper rxBus, SP sp, Config config, ConstraintChecker constraintChecker,
      ResourceHelper resourceHelper, ProfileFunction profileFunction, Context context,
      CommandQueueProvider commandQueue, ActivePluginProvider activePlugin,
      TreatmentsPlugin treatmentsPlugin, VirtualPumpPlugin virtualPumpPlugin,
      Lazy<ActionStringHandler> actionStringHandler, IobCobCalculatorPlugin iobCobCalculatorPlugin,
      ReceiverStatusStore receiverStatusStore, FabricPrivacy fabricPrivacy, NSUpload nsUpload,
      HardLimits hardLimits) {
    return new LoopPlugin(injector, aapsLogger, rxBus, sp, config, constraintChecker, resourceHelper, profileFunction, context, commandQueue, activePlugin, treatmentsPlugin, virtualPumpPlugin, actionStringHandler, iobCobCalculatorPlugin, receiverStatusStore, fabricPrivacy, nsUpload, hardLimits);
  }
}
