// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.activities;

import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.danaRKorean.DanaRKoreanPlugin;
import info.nightscout.androidaps.danaRv2.DanaRv2Plugin;
import info.nightscout.androidaps.danar.DanaRPlugin;
import info.nightscout.androidaps.danars.DanaRSPlugin;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.aps.openAPSAMA.OpenAPSAMAPlugin;
import info.nightscout.androidaps.plugins.aps.openAPSSMB.OpenAPSSMBPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.configBuilder.PluginStore;
import info.nightscout.androidaps.plugins.constraints.safety.SafetyPlugin;
import info.nightscout.androidaps.plugins.general.automation.AutomationPlugin;
import info.nightscout.androidaps.plugins.general.maintenance.MaintenancePlugin;
import info.nightscout.androidaps.plugins.general.nsclient.NSClientPlugin;
import info.nightscout.androidaps.plugins.general.nsclient.data.NSSettingsStatus;
import info.nightscout.androidaps.plugins.general.openhumans.OpenHumansUploader;
import info.nightscout.androidaps.plugins.general.smsCommunicator.SmsCommunicatorPlugin;
import info.nightscout.androidaps.plugins.general.tidepool.TidepoolPlugin;
import info.nightscout.androidaps.plugins.general.wear.WearPlugin;
import info.nightscout.androidaps.plugins.general.xdripStatusline.StatusLinePlugin;
import info.nightscout.androidaps.plugins.insulin.InsulinOrefFreePeakPlugin;
import info.nightscout.androidaps.plugins.pump.combo.ComboPlugin;
import info.nightscout.androidaps.plugins.pump.insight.LocalInsightPlugin;
import info.nightscout.androidaps.plugins.pump.medtronic.MedtronicPumpPlugin;
import info.nightscout.androidaps.plugins.pump.virtual.VirtualPumpPlugin;
import info.nightscout.androidaps.plugins.sensitivity.SensitivityAAPSPlugin;
import info.nightscout.androidaps.plugins.sensitivity.SensitivityOref1Plugin;
import info.nightscout.androidaps.plugins.sensitivity.SensitivityWeightedAveragePlugin;
import info.nightscout.androidaps.plugins.source.DexcomPlugin;
import info.nightscout.androidaps.plugins.source.EversensePlugin;
import info.nightscout.androidaps.plugins.source.GlimpPlugin;
import info.nightscout.androidaps.plugins.source.PoctechPlugin;
import info.nightscout.androidaps.plugins.source.TomatoPlugin;
import info.nightscout.androidaps.utils.protection.PasswordCheck;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MyPreferenceFragment_MembersInjector implements MembersInjector<MyPreferenceFragment> {
  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<PluginStore> pluginStoreProvider;

  private final Provider<Config> configProvider;

  private final Provider<AutomationPlugin> automationPluginProvider;

  private final Provider<DanaRPlugin> danaRPluginProvider;

  private final Provider<DanaRKoreanPlugin> danaRKoreanPluginProvider;

  private final Provider<DanaRv2Plugin> danaRv2PluginProvider;

  private final Provider<DanaRSPlugin> danaRSPluginProvider;

  private final Provider<ComboPlugin> comboPluginProvider;

  private final Provider<InsulinOrefFreePeakPlugin> insulinOrefFreePeakPluginProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<LocalInsightPlugin> localInsightPluginProvider;

  private final Provider<MedtronicPumpPlugin> medtronicPumpPluginProvider;

  private final Provider<NSClientPlugin> nsClientPluginProvider;

  private final Provider<OpenAPSAMAPlugin> openAPSAMAPluginProvider;

  private final Provider<OpenAPSSMBPlugin> openAPSSMBPluginProvider;

  private final Provider<SafetyPlugin> safetyPluginProvider;

  private final Provider<SensitivityAAPSPlugin> sensitivityAAPSPluginProvider;

  private final Provider<SensitivityOref1Plugin> sensitivityOref1PluginProvider;

  private final Provider<SensitivityWeightedAveragePlugin> sensitivityWeightedAveragePluginProvider;

  private final Provider<DexcomPlugin> dexcomPluginProvider;

  private final Provider<EversensePlugin> eversensePluginProvider;

  private final Provider<GlimpPlugin> glimpPluginProvider;

  private final Provider<PoctechPlugin> poctechPluginProvider;

  private final Provider<TomatoPlugin> tomatoPluginProvider;

  private final Provider<SmsCommunicatorPlugin> smsCommunicatorPluginProvider;

  private final Provider<StatusLinePlugin> statusLinePluginProvider;

  private final Provider<TidepoolPlugin> tidepoolPluginProvider;

  private final Provider<VirtualPumpPlugin> virtualPumpPluginProvider;

  private final Provider<WearPlugin> wearPluginProvider;

  private final Provider<MaintenancePlugin> maintenancePluginProvider;

  private final Provider<PasswordCheck> passwordCheckProvider;

  private final Provider<NSSettingsStatus> nsSettingStatusProvider;

  private final Provider<OpenHumansUploader> openHumansUploaderProvider;

  public MyPreferenceFragment_MembersInjector(Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<PluginStore> pluginStoreProvider,
      Provider<Config> configProvider, Provider<AutomationPlugin> automationPluginProvider,
      Provider<DanaRPlugin> danaRPluginProvider,
      Provider<DanaRKoreanPlugin> danaRKoreanPluginProvider,
      Provider<DanaRv2Plugin> danaRv2PluginProvider, Provider<DanaRSPlugin> danaRSPluginProvider,
      Provider<ComboPlugin> comboPluginProvider,
      Provider<InsulinOrefFreePeakPlugin> insulinOrefFreePeakPluginProvider,
      Provider<LoopPlugin> loopPluginProvider,
      Provider<LocalInsightPlugin> localInsightPluginProvider,
      Provider<MedtronicPumpPlugin> medtronicPumpPluginProvider,
      Provider<NSClientPlugin> nsClientPluginProvider,
      Provider<OpenAPSAMAPlugin> openAPSAMAPluginProvider,
      Provider<OpenAPSSMBPlugin> openAPSSMBPluginProvider,
      Provider<SafetyPlugin> safetyPluginProvider,
      Provider<SensitivityAAPSPlugin> sensitivityAAPSPluginProvider,
      Provider<SensitivityOref1Plugin> sensitivityOref1PluginProvider,
      Provider<SensitivityWeightedAveragePlugin> sensitivityWeightedAveragePluginProvider,
      Provider<DexcomPlugin> dexcomPluginProvider,
      Provider<EversensePlugin> eversensePluginProvider, Provider<GlimpPlugin> glimpPluginProvider,
      Provider<PoctechPlugin> poctechPluginProvider, Provider<TomatoPlugin> tomatoPluginProvider,
      Provider<SmsCommunicatorPlugin> smsCommunicatorPluginProvider,
      Provider<StatusLinePlugin> statusLinePluginProvider,
      Provider<TidepoolPlugin> tidepoolPluginProvider,
      Provider<VirtualPumpPlugin> virtualPumpPluginProvider,
      Provider<WearPlugin> wearPluginProvider,
      Provider<MaintenancePlugin> maintenancePluginProvider,
      Provider<PasswordCheck> passwordCheckProvider,
      Provider<NSSettingsStatus> nsSettingStatusProvider,
      Provider<OpenHumansUploader> openHumansUploaderProvider) {
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.pluginStoreProvider = pluginStoreProvider;
    this.configProvider = configProvider;
    this.automationPluginProvider = automationPluginProvider;
    this.danaRPluginProvider = danaRPluginProvider;
    this.danaRKoreanPluginProvider = danaRKoreanPluginProvider;
    this.danaRv2PluginProvider = danaRv2PluginProvider;
    this.danaRSPluginProvider = danaRSPluginProvider;
    this.comboPluginProvider = comboPluginProvider;
    this.insulinOrefFreePeakPluginProvider = insulinOrefFreePeakPluginProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.localInsightPluginProvider = localInsightPluginProvider;
    this.medtronicPumpPluginProvider = medtronicPumpPluginProvider;
    this.nsClientPluginProvider = nsClientPluginProvider;
    this.openAPSAMAPluginProvider = openAPSAMAPluginProvider;
    this.openAPSSMBPluginProvider = openAPSSMBPluginProvider;
    this.safetyPluginProvider = safetyPluginProvider;
    this.sensitivityAAPSPluginProvider = sensitivityAAPSPluginProvider;
    this.sensitivityOref1PluginProvider = sensitivityOref1PluginProvider;
    this.sensitivityWeightedAveragePluginProvider = sensitivityWeightedAveragePluginProvider;
    this.dexcomPluginProvider = dexcomPluginProvider;
    this.eversensePluginProvider = eversensePluginProvider;
    this.glimpPluginProvider = glimpPluginProvider;
    this.poctechPluginProvider = poctechPluginProvider;
    this.tomatoPluginProvider = tomatoPluginProvider;
    this.smsCommunicatorPluginProvider = smsCommunicatorPluginProvider;
    this.statusLinePluginProvider = statusLinePluginProvider;
    this.tidepoolPluginProvider = tidepoolPluginProvider;
    this.virtualPumpPluginProvider = virtualPumpPluginProvider;
    this.wearPluginProvider = wearPluginProvider;
    this.maintenancePluginProvider = maintenancePluginProvider;
    this.passwordCheckProvider = passwordCheckProvider;
    this.nsSettingStatusProvider = nsSettingStatusProvider;
    this.openHumansUploaderProvider = openHumansUploaderProvider;
  }

  public static MembersInjector<MyPreferenceFragment> create(Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<PluginStore> pluginStoreProvider,
      Provider<Config> configProvider, Provider<AutomationPlugin> automationPluginProvider,
      Provider<DanaRPlugin> danaRPluginProvider,
      Provider<DanaRKoreanPlugin> danaRKoreanPluginProvider,
      Provider<DanaRv2Plugin> danaRv2PluginProvider, Provider<DanaRSPlugin> danaRSPluginProvider,
      Provider<ComboPlugin> comboPluginProvider,
      Provider<InsulinOrefFreePeakPlugin> insulinOrefFreePeakPluginProvider,
      Provider<LoopPlugin> loopPluginProvider,
      Provider<LocalInsightPlugin> localInsightPluginProvider,
      Provider<MedtronicPumpPlugin> medtronicPumpPluginProvider,
      Provider<NSClientPlugin> nsClientPluginProvider,
      Provider<OpenAPSAMAPlugin> openAPSAMAPluginProvider,
      Provider<OpenAPSSMBPlugin> openAPSSMBPluginProvider,
      Provider<SafetyPlugin> safetyPluginProvider,
      Provider<SensitivityAAPSPlugin> sensitivityAAPSPluginProvider,
      Provider<SensitivityOref1Plugin> sensitivityOref1PluginProvider,
      Provider<SensitivityWeightedAveragePlugin> sensitivityWeightedAveragePluginProvider,
      Provider<DexcomPlugin> dexcomPluginProvider,
      Provider<EversensePlugin> eversensePluginProvider, Provider<GlimpPlugin> glimpPluginProvider,
      Provider<PoctechPlugin> poctechPluginProvider, Provider<TomatoPlugin> tomatoPluginProvider,
      Provider<SmsCommunicatorPlugin> smsCommunicatorPluginProvider,
      Provider<StatusLinePlugin> statusLinePluginProvider,
      Provider<TidepoolPlugin> tidepoolPluginProvider,
      Provider<VirtualPumpPlugin> virtualPumpPluginProvider,
      Provider<WearPlugin> wearPluginProvider,
      Provider<MaintenancePlugin> maintenancePluginProvider,
      Provider<PasswordCheck> passwordCheckProvider,
      Provider<NSSettingsStatus> nsSettingStatusProvider,
      Provider<OpenHumansUploader> openHumansUploaderProvider) {
    return new MyPreferenceFragment_MembersInjector(rxBusProvider, resourceHelperProvider, spProvider, profileFunctionProvider, pluginStoreProvider, configProvider, automationPluginProvider, danaRPluginProvider, danaRKoreanPluginProvider, danaRv2PluginProvider, danaRSPluginProvider, comboPluginProvider, insulinOrefFreePeakPluginProvider, loopPluginProvider, localInsightPluginProvider, medtronicPumpPluginProvider, nsClientPluginProvider, openAPSAMAPluginProvider, openAPSSMBPluginProvider, safetyPluginProvider, sensitivityAAPSPluginProvider, sensitivityOref1PluginProvider, sensitivityWeightedAveragePluginProvider, dexcomPluginProvider, eversensePluginProvider, glimpPluginProvider, poctechPluginProvider, tomatoPluginProvider, smsCommunicatorPluginProvider, statusLinePluginProvider, tidepoolPluginProvider, virtualPumpPluginProvider, wearPluginProvider, maintenancePluginProvider, passwordCheckProvider, nsSettingStatusProvider, openHumansUploaderProvider);
  }

  @Override
  public void injectMembers(MyPreferenceFragment instance) {
    injectRxBus(instance, rxBusProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectSp(instance, spProvider.get());
    injectProfileFunction(instance, profileFunctionProvider.get());
    injectPluginStore(instance, pluginStoreProvider.get());
    injectConfig(instance, configProvider.get());
    injectAutomationPlugin(instance, automationPluginProvider.get());
    injectDanaRPlugin(instance, danaRPluginProvider.get());
    injectDanaRKoreanPlugin(instance, danaRKoreanPluginProvider.get());
    injectDanaRv2Plugin(instance, danaRv2PluginProvider.get());
    injectDanaRSPlugin(instance, danaRSPluginProvider.get());
    injectComboPlugin(instance, comboPluginProvider.get());
    injectInsulinOrefFreePeakPlugin(instance, insulinOrefFreePeakPluginProvider.get());
    injectLoopPlugin(instance, loopPluginProvider.get());
    injectLocalInsightPlugin(instance, localInsightPluginProvider.get());
    injectMedtronicPumpPlugin(instance, medtronicPumpPluginProvider.get());
    injectNsClientPlugin(instance, nsClientPluginProvider.get());
    injectOpenAPSAMAPlugin(instance, openAPSAMAPluginProvider.get());
    injectOpenAPSSMBPlugin(instance, openAPSSMBPluginProvider.get());
    injectSafetyPlugin(instance, safetyPluginProvider.get());
    injectSensitivityAAPSPlugin(instance, sensitivityAAPSPluginProvider.get());
    injectSensitivityOref1Plugin(instance, sensitivityOref1PluginProvider.get());
    injectSensitivityWeightedAveragePlugin(instance, sensitivityWeightedAveragePluginProvider.get());
    injectDexcomPlugin(instance, dexcomPluginProvider.get());
    injectEversensePlugin(instance, eversensePluginProvider.get());
    injectGlimpPlugin(instance, glimpPluginProvider.get());
    injectPoctechPlugin(instance, poctechPluginProvider.get());
    injectTomatoPlugin(instance, tomatoPluginProvider.get());
    injectSmsCommunicatorPlugin(instance, smsCommunicatorPluginProvider.get());
    injectStatusLinePlugin(instance, statusLinePluginProvider.get());
    injectTidepoolPlugin(instance, tidepoolPluginProvider.get());
    injectVirtualPumpPlugin(instance, virtualPumpPluginProvider.get());
    injectWearPlugin(instance, wearPluginProvider.get());
    injectMaintenancePlugin(instance, maintenancePluginProvider.get());
    injectPasswordCheck(instance, passwordCheckProvider.get());
    injectNsSettingStatus(instance, nsSettingStatusProvider.get());
    injectOpenHumansUploader(instance, openHumansUploaderProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.rxBus")
  public static void injectRxBus(MyPreferenceFragment instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.resourceHelper")
  public static void injectResourceHelper(MyPreferenceFragment instance,
      ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.sp")
  public static void injectSp(MyPreferenceFragment instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.profileFunction")
  public static void injectProfileFunction(MyPreferenceFragment instance,
      ProfileFunction profileFunction) {
    instance.profileFunction = profileFunction;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.pluginStore")
  public static void injectPluginStore(MyPreferenceFragment instance, PluginStore pluginStore) {
    instance.pluginStore = pluginStore;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.config")
  public static void injectConfig(MyPreferenceFragment instance, Config config) {
    instance.config = config;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.automationPlugin")
  public static void injectAutomationPlugin(MyPreferenceFragment instance,
      AutomationPlugin automationPlugin) {
    instance.automationPlugin = automationPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.danaRPlugin")
  public static void injectDanaRPlugin(MyPreferenceFragment instance, DanaRPlugin danaRPlugin) {
    instance.danaRPlugin = danaRPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.danaRKoreanPlugin")
  public static void injectDanaRKoreanPlugin(MyPreferenceFragment instance,
      DanaRKoreanPlugin danaRKoreanPlugin) {
    instance.danaRKoreanPlugin = danaRKoreanPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.danaRv2Plugin")
  public static void injectDanaRv2Plugin(MyPreferenceFragment instance,
      DanaRv2Plugin danaRv2Plugin) {
    instance.danaRv2Plugin = danaRv2Plugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.danaRSPlugin")
  public static void injectDanaRSPlugin(MyPreferenceFragment instance, DanaRSPlugin danaRSPlugin) {
    instance.danaRSPlugin = danaRSPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.comboPlugin")
  public static void injectComboPlugin(MyPreferenceFragment instance, ComboPlugin comboPlugin) {
    instance.comboPlugin = comboPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.insulinOrefFreePeakPlugin")
  public static void injectInsulinOrefFreePeakPlugin(MyPreferenceFragment instance,
      InsulinOrefFreePeakPlugin insulinOrefFreePeakPlugin) {
    instance.insulinOrefFreePeakPlugin = insulinOrefFreePeakPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.loopPlugin")
  public static void injectLoopPlugin(MyPreferenceFragment instance, LoopPlugin loopPlugin) {
    instance.loopPlugin = loopPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.localInsightPlugin")
  public static void injectLocalInsightPlugin(MyPreferenceFragment instance,
      LocalInsightPlugin localInsightPlugin) {
    instance.localInsightPlugin = localInsightPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.medtronicPumpPlugin")
  public static void injectMedtronicPumpPlugin(MyPreferenceFragment instance,
      MedtronicPumpPlugin medtronicPumpPlugin) {
    instance.medtronicPumpPlugin = medtronicPumpPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.nsClientPlugin")
  public static void injectNsClientPlugin(MyPreferenceFragment instance,
      NSClientPlugin nsClientPlugin) {
    instance.nsClientPlugin = nsClientPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.openAPSAMAPlugin")
  public static void injectOpenAPSAMAPlugin(MyPreferenceFragment instance,
      OpenAPSAMAPlugin openAPSAMAPlugin) {
    instance.openAPSAMAPlugin = openAPSAMAPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.openAPSSMBPlugin")
  public static void injectOpenAPSSMBPlugin(MyPreferenceFragment instance,
      OpenAPSSMBPlugin openAPSSMBPlugin) {
    instance.openAPSSMBPlugin = openAPSSMBPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.safetyPlugin")
  public static void injectSafetyPlugin(MyPreferenceFragment instance, SafetyPlugin safetyPlugin) {
    instance.safetyPlugin = safetyPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.sensitivityAAPSPlugin")
  public static void injectSensitivityAAPSPlugin(MyPreferenceFragment instance,
      SensitivityAAPSPlugin sensitivityAAPSPlugin) {
    instance.sensitivityAAPSPlugin = sensitivityAAPSPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.sensitivityOref1Plugin")
  public static void injectSensitivityOref1Plugin(MyPreferenceFragment instance,
      SensitivityOref1Plugin sensitivityOref1Plugin) {
    instance.sensitivityOref1Plugin = sensitivityOref1Plugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.sensitivityWeightedAveragePlugin")
  public static void injectSensitivityWeightedAveragePlugin(MyPreferenceFragment instance,
      SensitivityWeightedAveragePlugin sensitivityWeightedAveragePlugin) {
    instance.sensitivityWeightedAveragePlugin = sensitivityWeightedAveragePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.dexcomPlugin")
  public static void injectDexcomPlugin(MyPreferenceFragment instance, DexcomPlugin dexcomPlugin) {
    instance.dexcomPlugin = dexcomPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.eversensePlugin")
  public static void injectEversensePlugin(MyPreferenceFragment instance,
      EversensePlugin eversensePlugin) {
    instance.eversensePlugin = eversensePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.glimpPlugin")
  public static void injectGlimpPlugin(MyPreferenceFragment instance, GlimpPlugin glimpPlugin) {
    instance.glimpPlugin = glimpPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.poctechPlugin")
  public static void injectPoctechPlugin(MyPreferenceFragment instance,
      PoctechPlugin poctechPlugin) {
    instance.poctechPlugin = poctechPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.tomatoPlugin")
  public static void injectTomatoPlugin(MyPreferenceFragment instance, TomatoPlugin tomatoPlugin) {
    instance.tomatoPlugin = tomatoPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.smsCommunicatorPlugin")
  public static void injectSmsCommunicatorPlugin(MyPreferenceFragment instance,
      SmsCommunicatorPlugin smsCommunicatorPlugin) {
    instance.smsCommunicatorPlugin = smsCommunicatorPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.statusLinePlugin")
  public static void injectStatusLinePlugin(MyPreferenceFragment instance,
      StatusLinePlugin statusLinePlugin) {
    instance.statusLinePlugin = statusLinePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.tidepoolPlugin")
  public static void injectTidepoolPlugin(MyPreferenceFragment instance,
      TidepoolPlugin tidepoolPlugin) {
    instance.tidepoolPlugin = tidepoolPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.virtualPumpPlugin")
  public static void injectVirtualPumpPlugin(MyPreferenceFragment instance,
      VirtualPumpPlugin virtualPumpPlugin) {
    instance.virtualPumpPlugin = virtualPumpPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.wearPlugin")
  public static void injectWearPlugin(MyPreferenceFragment instance, WearPlugin wearPlugin) {
    instance.wearPlugin = wearPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.maintenancePlugin")
  public static void injectMaintenancePlugin(MyPreferenceFragment instance,
      MaintenancePlugin maintenancePlugin) {
    instance.maintenancePlugin = maintenancePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.passwordCheck")
  public static void injectPasswordCheck(MyPreferenceFragment instance,
      PasswordCheck passwordCheck) {
    instance.passwordCheck = passwordCheck;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.nsSettingStatus")
  public static void injectNsSettingStatus(MyPreferenceFragment instance,
      NSSettingsStatus nsSettingStatus) {
    instance.nsSettingStatus = nsSettingStatus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.activities.MyPreferenceFragment.openHumansUploader")
  public static void injectOpenHumansUploader(MyPreferenceFragment instance,
      OpenHumansUploader openHumansUploader) {
    instance.openHumansUploader = openHumansUploader;
  }
}
