// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.configBuilder;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.protection.ProtectionCheck;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ConfigBuilderFragment_MembersInjector implements MembersInjector<ConfigBuilderFragment> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<ConfigBuilderPlugin> configBuilderPluginProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<ProtectionCheck> protectionCheckProvider;

  private final Provider<Config> configProvider;

  public ConfigBuilderFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<ConfigBuilderPlugin> configBuilderPluginProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<ProtectionCheck> protectionCheckProvider, Provider<Config> configProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.configBuilderPluginProvider = configBuilderPluginProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.activePluginProvider = activePluginProvider;
    this.protectionCheckProvider = protectionCheckProvider;
    this.configProvider = configProvider;
  }

  public static MembersInjector<ConfigBuilderFragment> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<ConfigBuilderPlugin> configBuilderPluginProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<ProtectionCheck> protectionCheckProvider, Provider<Config> configProvider) {
    return new ConfigBuilderFragment_MembersInjector(androidInjectorProvider, rxBusProvider, resourceHelperProvider, configBuilderPluginProvider, fabricPrivacyProvider, activePluginProvider, protectionCheckProvider, configProvider);
  }

  @Override
  public void injectMembers(ConfigBuilderFragment instance) {
    DaggerFragment_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectConfigBuilderPlugin(instance, configBuilderPluginProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectActivePlugin(instance, activePluginProvider.get());
    injectProtectionCheck(instance, protectionCheckProvider.get());
    injectConfig(instance, configProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderFragment.rxBus")
  public static void injectRxBus(ConfigBuilderFragment instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderFragment.resourceHelper")
  public static void injectResourceHelper(ConfigBuilderFragment instance,
      ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderFragment.configBuilderPlugin")
  public static void injectConfigBuilderPlugin(ConfigBuilderFragment instance,
      ConfigBuilderPlugin configBuilderPlugin) {
    instance.configBuilderPlugin = configBuilderPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderFragment.fabricPrivacy")
  public static void injectFabricPrivacy(ConfigBuilderFragment instance,
      FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderFragment.activePlugin")
  public static void injectActivePlugin(ConfigBuilderFragment instance,
      ActivePluginProvider activePlugin) {
    instance.activePlugin = activePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderFragment.protectionCheck")
  public static void injectProtectionCheck(ConfigBuilderFragment instance,
      ProtectionCheck protectionCheck) {
    instance.protectionCheck = protectionCheck;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderFragment.config")
  public static void injectConfig(ConfigBuilderFragment instance, Config config) {
    instance.config = config;
  }
}
