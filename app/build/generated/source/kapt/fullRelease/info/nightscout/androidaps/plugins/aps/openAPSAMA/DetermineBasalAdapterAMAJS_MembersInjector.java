// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.aps.openAPSAMA;

import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.configBuilder.ConstraintChecker;
import info.nightscout.androidaps.plugins.general.openhumans.OpenHumansUploader;
import info.nightscout.androidaps.plugins.treatments.TreatmentsPlugin;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DetermineBasalAdapterAMAJS_MembersInjector implements MembersInjector<DetermineBasalAdapterAMAJS> {
  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ConstraintChecker> constraintCheckerProvider;

  private final Provider<SP> spProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<TreatmentsPlugin> treatmentsPluginProvider;

  private final Provider<OpenHumansUploader> openHumansUploaderProvider;

  public DetermineBasalAdapterAMAJS_MembersInjector(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<ConstraintChecker> constraintCheckerProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider,
      Provider<OpenHumansUploader> openHumansUploaderProvider) {
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.constraintCheckerProvider = constraintCheckerProvider;
    this.spProvider = spProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.treatmentsPluginProvider = treatmentsPluginProvider;
    this.openHumansUploaderProvider = openHumansUploaderProvider;
  }

  public static MembersInjector<DetermineBasalAdapterAMAJS> create(
      Provider<AAPSLogger> aapsLoggerProvider,
      Provider<ConstraintChecker> constraintCheckerProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider,
      Provider<OpenHumansUploader> openHumansUploaderProvider) {
    return new DetermineBasalAdapterAMAJS_MembersInjector(aapsLoggerProvider, constraintCheckerProvider, spProvider, profileFunctionProvider, treatmentsPluginProvider, openHumansUploaderProvider);
  }

  @Override
  public void injectMembers(DetermineBasalAdapterAMAJS instance) {
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectConstraintChecker(instance, constraintCheckerProvider.get());
    injectSp(instance, spProvider.get());
    injectProfileFunction(instance, profileFunctionProvider.get());
    injectTreatmentsPlugin(instance, treatmentsPluginProvider.get());
    injectOpenHumansUploader(instance, openHumansUploaderProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.aps.openAPSAMA.DetermineBasalAdapterAMAJS.aapsLogger")
  public static void injectAapsLogger(DetermineBasalAdapterAMAJS instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.aps.openAPSAMA.DetermineBasalAdapterAMAJS.constraintChecker")
  public static void injectConstraintChecker(DetermineBasalAdapterAMAJS instance,
      ConstraintChecker constraintChecker) {
    instance.constraintChecker = constraintChecker;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.aps.openAPSAMA.DetermineBasalAdapterAMAJS.sp")
  public static void injectSp(DetermineBasalAdapterAMAJS instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.aps.openAPSAMA.DetermineBasalAdapterAMAJS.profileFunction")
  public static void injectProfileFunction(DetermineBasalAdapterAMAJS instance,
      ProfileFunction profileFunction) {
    instance.profileFunction = profileFunction;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.aps.openAPSAMA.DetermineBasalAdapterAMAJS.treatmentsPlugin")
  public static void injectTreatmentsPlugin(DetermineBasalAdapterAMAJS instance,
      TreatmentsPlugin treatmentsPlugin) {
    instance.treatmentsPlugin = treatmentsPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.aps.openAPSAMA.DetermineBasalAdapterAMAJS.openHumansUploader")
  public static void injectOpenHumansUploader(DetermineBasalAdapterAMAJS instance,
      OpenHumansUploader openHumansUploader) {
    instance.openHumansUploader = openHumansUploader;
  }
}
