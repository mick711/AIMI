// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.profile.local;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.HardLimits;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LocalProfileFragment_MembersInjector implements MembersInjector<LocalProfileFragment> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<LocalProfilePlugin> localProfilePluginProvider;

  private final Provider<HardLimits> hardLimitsProvider;

  private final Provider<DateUtil> dateUtilProvider;

  public LocalProfileFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<LocalProfilePlugin> localProfilePluginProvider,
      Provider<HardLimits> hardLimitsProvider, Provider<DateUtil> dateUtilProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.activePluginProvider = activePluginProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.localProfilePluginProvider = localProfilePluginProvider;
    this.hardLimitsProvider = hardLimitsProvider;
    this.dateUtilProvider = dateUtilProvider;
  }

  public static MembersInjector<LocalProfileFragment> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<LocalProfilePlugin> localProfilePluginProvider,
      Provider<HardLimits> hardLimitsProvider, Provider<DateUtil> dateUtilProvider) {
    return new LocalProfileFragment_MembersInjector(androidInjectorProvider, aapsLoggerProvider, rxBusProvider, resourceHelperProvider, activePluginProvider, fabricPrivacyProvider, localProfilePluginProvider, hardLimitsProvider, dateUtilProvider);
  }

  @Override
  public void injectMembers(LocalProfileFragment instance) {
    DaggerFragment_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectActivePlugin(instance, activePluginProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectLocalProfilePlugin(instance, localProfilePluginProvider.get());
    injectHardLimits(instance, hardLimitsProvider.get());
    injectDateUtil(instance, dateUtilProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.profile.local.LocalProfileFragment.aapsLogger")
  public static void injectAapsLogger(LocalProfileFragment instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.profile.local.LocalProfileFragment.rxBus")
  public static void injectRxBus(LocalProfileFragment instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.profile.local.LocalProfileFragment.resourceHelper")
  public static void injectResourceHelper(LocalProfileFragment instance,
      ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.profile.local.LocalProfileFragment.activePlugin")
  public static void injectActivePlugin(LocalProfileFragment instance,
      ActivePluginProvider activePlugin) {
    instance.activePlugin = activePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.profile.local.LocalProfileFragment.fabricPrivacy")
  public static void injectFabricPrivacy(LocalProfileFragment instance,
      FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.profile.local.LocalProfileFragment.localProfilePlugin")
  public static void injectLocalProfilePlugin(LocalProfileFragment instance,
      LocalProfilePlugin localProfilePlugin) {
    instance.localProfilePlugin = localProfilePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.profile.local.LocalProfileFragment.hardLimits")
  public static void injectHardLimits(LocalProfileFragment instance, HardLimits hardLimits) {
    instance.hardLimits = hardLimits;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.profile.local.LocalProfileFragment.dateUtil")
  public static void injectDateUtil(LocalProfileFragment instance, DateUtil dateUtil) {
    instance.dateUtil = dateUtil;
  }
}
