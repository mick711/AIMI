// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.utils.wizard;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.CommandQueueProvider;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.configBuilder.ConstraintChecker;
import info.nightscout.androidaps.plugins.general.automation.AutomationPlugin;
import info.nightscout.androidaps.plugins.iob.iobCobCalculator.IobCobCalculatorPlugin;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BolusWizard_Factory implements Factory<BolusWizard> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<SP> spProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<ConstraintChecker> constraintCheckerProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<CommandQueueProvider> commandQueueProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider;

  private final Provider<AutomationPlugin> automationPluginProvider;

  private final Provider<DateUtil> dateUtilProvider;

  private final Provider<Config> configProvider;

  public BolusWizard_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<CommandQueueProvider> commandQueueProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<AutomationPlugin> automationPluginProvider, Provider<DateUtil> dateUtilProvider,
      Provider<Config> configProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.rxBusProvider = rxBusProvider;
    this.spProvider = spProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.constraintCheckerProvider = constraintCheckerProvider;
    this.activePluginProvider = activePluginProvider;
    this.commandQueueProvider = commandQueueProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.iobCobCalculatorPluginProvider = iobCobCalculatorPluginProvider;
    this.automationPluginProvider = automationPluginProvider;
    this.dateUtilProvider = dateUtilProvider;
    this.configProvider = configProvider;
  }

  @Override
  public BolusWizard get() {
    BolusWizard instance = newInstance(injectorProvider.get());
    BolusWizard_MembersInjector.injectAapsLogger(instance, aapsLoggerProvider.get());
    BolusWizard_MembersInjector.injectResourceHelper(instance, resourceHelperProvider.get());
    BolusWizard_MembersInjector.injectRxBus(instance, rxBusProvider.get());
    BolusWizard_MembersInjector.injectSp(instance, spProvider.get());
    BolusWizard_MembersInjector.injectProfileFunction(instance, profileFunctionProvider.get());
    BolusWizard_MembersInjector.injectConstraintChecker(instance, constraintCheckerProvider.get());
    BolusWizard_MembersInjector.injectActivePlugin(instance, activePluginProvider.get());
    BolusWizard_MembersInjector.injectCommandQueue(instance, commandQueueProvider.get());
    BolusWizard_MembersInjector.injectLoopPlugin(instance, loopPluginProvider.get());
    BolusWizard_MembersInjector.injectIobCobCalculatorPlugin(instance, iobCobCalculatorPluginProvider.get());
    BolusWizard_MembersInjector.injectAutomationPlugin(instance, automationPluginProvider.get());
    BolusWizard_MembersInjector.injectDateUtil(instance, dateUtilProvider.get());
    BolusWizard_MembersInjector.injectConfig(instance, configProvider.get());
    return instance;
  }

  public static BolusWizard_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<CommandQueueProvider> commandQueueProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<AutomationPlugin> automationPluginProvider, Provider<DateUtil> dateUtilProvider,
      Provider<Config> configProvider) {
    return new BolusWizard_Factory(injectorProvider, aapsLoggerProvider, resourceHelperProvider, rxBusProvider, spProvider, profileFunctionProvider, constraintCheckerProvider, activePluginProvider, commandQueueProvider, loopPluginProvider, iobCobCalculatorPluginProvider, automationPluginProvider, dateUtilProvider, configProvider);
  }

  public static BolusWizard newInstance(HasAndroidInjector injector) {
    return new BolusWizard(injector);
  }
}
