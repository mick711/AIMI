// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.activities.DaggerAppCompatActivityWithResult_MembersInjector;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.ImportExportPrefsInterface;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.configBuilder.ConstraintChecker;
import info.nightscout.androidaps.plugins.constraints.signatureVerifier.SignatureVerifierPlugin;
import info.nightscout.androidaps.plugins.constraints.versionChecker.VersionCheckerUtils;
import info.nightscout.androidaps.plugins.general.nsclient.data.NSSettingsStatus;
import info.nightscout.androidaps.plugins.general.smsCommunicator.SmsCommunicatorPlugin;
import info.nightscout.androidaps.utils.AndroidPermission;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.buildHelper.BuildHelper;
import info.nightscout.androidaps.utils.protection.ProtectionCheck;
import info.nightscout.androidaps.utils.resources.IconsProvider;
import info.nightscout.androidaps.utils.resources.ResourceHelperImplementation;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<ResourceHelperImplementation> resourceHelperProvider;

  private final Provider<ImportExportPrefsInterface> importExportPrefsProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<AndroidPermission> androidPermissionProvider;

  private final Provider<SP> spProvider;

  private final Provider<VersionCheckerUtils> versionCheckerUtilsProvider;

  private final Provider<SmsCommunicatorPlugin> smsCommunicatorPluginProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<NSSettingsStatus> nsSettingsStatusProvider;

  private final Provider<BuildHelper> buildHelperProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<ProtectionCheck> protectionCheckProvider;

  private final Provider<IconsProvider> iconsProvider;

  private final Provider<ConstraintChecker> constraintCheckerProvider;

  private final Provider<SignatureVerifierPlugin> signatureVerifierPluginProvider;

  private final Provider<Config> configProvider;

  public MainActivity_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<ResourceHelperImplementation> resourceHelperProvider,
      Provider<ImportExportPrefsInterface> importExportPrefsProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<AndroidPermission> androidPermissionProvider, Provider<SP> spProvider,
      Provider<VersionCheckerUtils> versionCheckerUtilsProvider,
      Provider<SmsCommunicatorPlugin> smsCommunicatorPluginProvider,
      Provider<LoopPlugin> loopPluginProvider, Provider<NSSettingsStatus> nsSettingsStatusProvider,
      Provider<BuildHelper> buildHelperProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ProtectionCheck> protectionCheckProvider, Provider<IconsProvider> iconsProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<SignatureVerifierPlugin> signatureVerifierPluginProvider,
      Provider<Config> configProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.importExportPrefsProvider = importExportPrefsProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.androidPermissionProvider = androidPermissionProvider;
    this.spProvider = spProvider;
    this.versionCheckerUtilsProvider = versionCheckerUtilsProvider;
    this.smsCommunicatorPluginProvider = smsCommunicatorPluginProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.nsSettingsStatusProvider = nsSettingsStatusProvider;
    this.buildHelperProvider = buildHelperProvider;
    this.activePluginProvider = activePluginProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.protectionCheckProvider = protectionCheckProvider;
    this.iconsProvider = iconsProvider;
    this.constraintCheckerProvider = constraintCheckerProvider;
    this.signatureVerifierPluginProvider = signatureVerifierPluginProvider;
    this.configProvider = configProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<ResourceHelperImplementation> resourceHelperProvider,
      Provider<ImportExportPrefsInterface> importExportPrefsProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<AndroidPermission> androidPermissionProvider, Provider<SP> spProvider,
      Provider<VersionCheckerUtils> versionCheckerUtilsProvider,
      Provider<SmsCommunicatorPlugin> smsCommunicatorPluginProvider,
      Provider<LoopPlugin> loopPluginProvider, Provider<NSSettingsStatus> nsSettingsStatusProvider,
      Provider<BuildHelper> buildHelperProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ProtectionCheck> protectionCheckProvider, Provider<IconsProvider> iconsProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<SignatureVerifierPlugin> signatureVerifierPluginProvider,
      Provider<Config> configProvider) {
    return new MainActivity_MembersInjector(androidInjectorProvider, resourceHelperProvider, importExportPrefsProvider, aapsLoggerProvider, rxBusProvider, androidPermissionProvider, spProvider, versionCheckerUtilsProvider, smsCommunicatorPluginProvider, loopPluginProvider, nsSettingsStatusProvider, buildHelperProvider, activePluginProvider, fabricPrivacyProvider, protectionCheckProvider, iconsProvider, constraintCheckerProvider, signatureVerifierPluginProvider, configProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    DaggerAppCompatActivityWithResult_MembersInjector.injectResourceHelper(instance, resourceHelperProvider.get());
    DaggerAppCompatActivityWithResult_MembersInjector.injectImportExportPrefs(instance, importExportPrefsProvider.get());
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectAndroidPermission(instance, androidPermissionProvider.get());
    injectSp(instance, spProvider.get());
    injectVersionCheckerUtils(instance, versionCheckerUtilsProvider.get());
    injectSmsCommunicatorPlugin(instance, smsCommunicatorPluginProvider.get());
    injectLoopPlugin(instance, loopPluginProvider.get());
    injectNsSettingsStatus(instance, nsSettingsStatusProvider.get());
    injectBuildHelper(instance, buildHelperProvider.get());
    injectActivePlugin(instance, activePluginProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectProtectionCheck(instance, protectionCheckProvider.get());
    injectIconsProvider(instance, iconsProvider.get());
    injectConstraintChecker(instance, constraintCheckerProvider.get());
    injectSignatureVerifierPlugin(instance, signatureVerifierPluginProvider.get());
    injectConfig(instance, configProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.aapsLogger")
  public static void injectAapsLogger(MainActivity instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.rxBus")
  public static void injectRxBus(MainActivity instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.androidPermission")
  public static void injectAndroidPermission(MainActivity instance,
      AndroidPermission androidPermission) {
    instance.androidPermission = androidPermission;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.sp")
  public static void injectSp(MainActivity instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.versionCheckerUtils")
  public static void injectVersionCheckerUtils(MainActivity instance,
      VersionCheckerUtils versionCheckerUtils) {
    instance.versionCheckerUtils = versionCheckerUtils;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.smsCommunicatorPlugin")
  public static void injectSmsCommunicatorPlugin(MainActivity instance,
      SmsCommunicatorPlugin smsCommunicatorPlugin) {
    instance.smsCommunicatorPlugin = smsCommunicatorPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.loopPlugin")
  public static void injectLoopPlugin(MainActivity instance, LoopPlugin loopPlugin) {
    instance.loopPlugin = loopPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.nsSettingsStatus")
  public static void injectNsSettingsStatus(MainActivity instance,
      NSSettingsStatus nsSettingsStatus) {
    instance.nsSettingsStatus = nsSettingsStatus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.buildHelper")
  public static void injectBuildHelper(MainActivity instance, BuildHelper buildHelper) {
    instance.buildHelper = buildHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.activePlugin")
  public static void injectActivePlugin(MainActivity instance, ActivePluginProvider activePlugin) {
    instance.activePlugin = activePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.fabricPrivacy")
  public static void injectFabricPrivacy(MainActivity instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.protectionCheck")
  public static void injectProtectionCheck(MainActivity instance, ProtectionCheck protectionCheck) {
    instance.protectionCheck = protectionCheck;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.iconsProvider")
  public static void injectIconsProvider(MainActivity instance, IconsProvider iconsProvider) {
    instance.iconsProvider = iconsProvider;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.constraintChecker")
  public static void injectConstraintChecker(MainActivity instance,
      ConstraintChecker constraintChecker) {
    instance.constraintChecker = constraintChecker;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.signatureVerifierPlugin")
  public static void injectSignatureVerifierPlugin(MainActivity instance,
      SignatureVerifierPlugin signatureVerifierPlugin) {
    instance.signatureVerifierPlugin = signatureVerifierPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainActivity.config")
  public static void injectConfig(MainActivity instance, Config config) {
    instance.config = config;
  }
}
