// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.pump.combo;

import android.content.Context;
import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.interfaces.CommandQueueProvider;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.treatments.TreatmentsPlugin;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ComboPlugin_Factory implements Factory<ComboPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<TreatmentsPlugin> treatmentsPluginProvider;

  private final Provider<SP> spProvider;

  private final Provider<CommandQueueProvider> commandQueueProvider;

  private final Provider<Context> contextProvider;

  public ComboPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider, Provider<SP> spProvider,
      Provider<CommandQueueProvider> commandQueueProvider, Provider<Context> contextProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.treatmentsPluginProvider = treatmentsPluginProvider;
    this.spProvider = spProvider;
    this.commandQueueProvider = commandQueueProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public ComboPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), rxBusProvider.get(), resourceHelperProvider.get(), profileFunctionProvider.get(), treatmentsPluginProvider.get(), spProvider.get(), commandQueueProvider.get(), contextProvider.get());
  }

  public static ComboPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider, Provider<SP> spProvider,
      Provider<CommandQueueProvider> commandQueueProvider, Provider<Context> contextProvider) {
    return new ComboPlugin_Factory(injectorProvider, aapsLoggerProvider, rxBusProvider, resourceHelperProvider, profileFunctionProvider, treatmentsPluginProvider, spProvider, commandQueueProvider, contextProvider);
  }

  public static ComboPlugin newInstance(HasAndroidInjector injector, AAPSLogger aapsLogger,
      RxBusWrapper rxBus, ResourceHelper resourceHelper, ProfileFunction profileFunction,
      TreatmentsPlugin treatmentsPlugin, SP sp, CommandQueueProvider commandQueue,
      Context context) {
    return new ComboPlugin(injector, aapsLogger, rxBus, resourceHelper, profileFunction, treatmentsPlugin, sp, commandQueue, context);
  }
}
