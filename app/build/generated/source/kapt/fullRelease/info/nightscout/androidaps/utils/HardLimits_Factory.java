// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.utils;

import android.content.Context;
import dagger.internal.Factory;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.general.nsclient.NSUpload;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HardLimits_Factory implements Factory<HardLimits> {
  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<SP> spProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<Context> contextProvider;

  private final Provider<NSUpload> nsUploadProvider;

  public HardLimits_Factory(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<SP> spProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<Context> contextProvider,
      Provider<NSUpload> nsUploadProvider) {
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.spProvider = spProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.contextProvider = contextProvider;
    this.nsUploadProvider = nsUploadProvider;
  }

  @Override
  public HardLimits get() {
    return newInstance(aapsLoggerProvider.get(), rxBusProvider.get(), spProvider.get(), resourceHelperProvider.get(), contextProvider.get(), nsUploadProvider.get());
  }

  public static HardLimits_Factory create(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<SP> spProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<Context> contextProvider,
      Provider<NSUpload> nsUploadProvider) {
    return new HardLimits_Factory(aapsLoggerProvider, rxBusProvider, spProvider, resourceHelperProvider, contextProvider, nsUploadProvider);
  }

  public static HardLimits newInstance(AAPSLogger aapsLogger, RxBusWrapper rxBus, SP sp,
      ResourceHelper resourceHelper, Context context, NSUpload nsUpload) {
    return new HardLimits(aapsLogger, rxBus, sp, resourceHelper, context, nsUpload);
  }
}
