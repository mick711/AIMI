// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.setupwizard;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.HasAndroidInjector;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.activities.DaggerAppCompatActivityWithResult_MembersInjector;
import info.nightscout.androidaps.interfaces.ImportExportPrefsInterface;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.profile.local.LocalProfilePlugin;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.resources.ResourceHelperImplementation;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SetupWizardActivity_MembersInjector implements MembersInjector<SetupWizardActivity> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<ResourceHelperImplementation> resourceHelperProvider;

  private final Provider<ImportExportPrefsInterface> importExportPrefsProvider;

  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<LocalProfilePlugin> localProfilePluginProvider;

  private final Provider<SWDefinition> swDefinitionProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<SP> spProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  public SetupWizardActivity_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<ResourceHelperImplementation> resourceHelperProvider,
      Provider<ImportExportPrefsInterface> importExportPrefsProvider,
      Provider<HasAndroidInjector> injectorProvider,
      Provider<LocalProfilePlugin> localProfilePluginProvider,
      Provider<SWDefinition> swDefinitionProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<SP> spProvider, Provider<FabricPrivacy> fabricPrivacyProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.importExportPrefsProvider = importExportPrefsProvider;
    this.injectorProvider = injectorProvider;
    this.localProfilePluginProvider = localProfilePluginProvider;
    this.swDefinitionProvider = swDefinitionProvider;
    this.rxBusProvider = rxBusProvider;
    this.spProvider = spProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
  }

  public static MembersInjector<SetupWizardActivity> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<ResourceHelperImplementation> resourceHelperProvider,
      Provider<ImportExportPrefsInterface> importExportPrefsProvider,
      Provider<HasAndroidInjector> injectorProvider,
      Provider<LocalProfilePlugin> localProfilePluginProvider,
      Provider<SWDefinition> swDefinitionProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<SP> spProvider, Provider<FabricPrivacy> fabricPrivacyProvider) {
    return new SetupWizardActivity_MembersInjector(androidInjectorProvider, resourceHelperProvider, importExportPrefsProvider, injectorProvider, localProfilePluginProvider, swDefinitionProvider, rxBusProvider, spProvider, fabricPrivacyProvider);
  }

  @Override
  public void injectMembers(SetupWizardActivity instance) {
    DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    DaggerAppCompatActivityWithResult_MembersInjector.injectResourceHelper(instance, resourceHelperProvider.get());
    DaggerAppCompatActivityWithResult_MembersInjector.injectImportExportPrefs(instance, importExportPrefsProvider.get());
    injectInjector(instance, injectorProvider.get());
    injectLocalProfilePlugin(instance, localProfilePluginProvider.get());
    injectSwDefinition(instance, swDefinitionProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectSp(instance, spProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.setupwizard.SetupWizardActivity.injector")
  public static void injectInjector(SetupWizardActivity instance, HasAndroidInjector injector) {
    instance.injector = injector;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.setupwizard.SetupWizardActivity.localProfilePlugin")
  public static void injectLocalProfilePlugin(SetupWizardActivity instance,
      LocalProfilePlugin localProfilePlugin) {
    instance.localProfilePlugin = localProfilePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.setupwizard.SetupWizardActivity.swDefinition")
  public static void injectSwDefinition(SetupWizardActivity instance, SWDefinition swDefinition) {
    instance.swDefinition = swDefinition;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.setupwizard.SetupWizardActivity.rxBus")
  public static void injectRxBus(SetupWizardActivity instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.setupwizard.SetupWizardActivity.sp")
  public static void injectSp(SetupWizardActivity instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.setupwizard.SetupWizardActivity.fabricPrivacy")
  public static void injectFabricPrivacy(SetupWizardActivity instance,
      FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }
}
