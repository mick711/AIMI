// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.food;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.general.nsclient.NSUpload;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FoodFragment_MembersInjector implements MembersInjector<FoodFragment> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<FoodPlugin> foodPluginProvider;

  private final Provider<NSUpload> nsUploadProvider;

  public FoodFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<FoodPlugin> foodPluginProvider,
      Provider<NSUpload> nsUploadProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.foodPluginProvider = foodPluginProvider;
    this.nsUploadProvider = nsUploadProvider;
  }

  public static MembersInjector<FoodFragment> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<FoodPlugin> foodPluginProvider,
      Provider<NSUpload> nsUploadProvider) {
    return new FoodFragment_MembersInjector(androidInjectorProvider, rxBusProvider, resourceHelperProvider, fabricPrivacyProvider, foodPluginProvider, nsUploadProvider);
  }

  @Override
  public void injectMembers(FoodFragment instance) {
    DaggerFragment_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectFoodPlugin(instance, foodPluginProvider.get());
    injectNsUpload(instance, nsUploadProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.food.FoodFragment.rxBus")
  public static void injectRxBus(FoodFragment instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.food.FoodFragment.resourceHelper")
  public static void injectResourceHelper(FoodFragment instance, ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.food.FoodFragment.fabricPrivacy")
  public static void injectFabricPrivacy(FoodFragment instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.food.FoodFragment.foodPlugin")
  public static void injectFoodPlugin(FoodFragment instance, FoodPlugin foodPlugin) {
    instance.foodPlugin = foodPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.food.FoodFragment.nsUpload")
  public static void injectNsUpload(FoodFragment instance, NSUpload nsUpload) {
    instance.nsUpload = nsUpload;
  }
}
