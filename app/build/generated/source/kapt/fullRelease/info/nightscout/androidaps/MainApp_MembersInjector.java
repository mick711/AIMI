// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps;

import dagger.MembersInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.db.StaticInjector;
import info.nightscout.androidaps.interfaces.PluginBase;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderPlugin;
import info.nightscout.androidaps.plugins.configBuilder.PluginStore;
import info.nightscout.androidaps.plugins.constraints.versionChecker.VersionCheckerUtils;
import info.nightscout.androidaps.plugins.general.nsclient.NSUpload;
import info.nightscout.androidaps.receivers.KeepAliveReceiver;
import info.nightscout.androidaps.utils.ActivityMonitor;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import java.util.List;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainApp_MembersInjector implements MembersInjector<MainApp> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<PluginStore> pluginStoreProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ActivityMonitor> activityMonitorProvider;

  private final Provider<VersionCheckerUtils> versionCheckersUtilsProvider;

  private final Provider<SP> spProvider;

  private final Provider<NSUpload> nsUploadProvider;

  private final Provider<Config> configProvider;

  private final Provider<ConfigBuilderPlugin> configBuilderPluginProvider;

  private final Provider<KeepAliveReceiver.KeepAliveManager> keepAliveManagerProvider;

  private final Provider<List<PluginBase>> pluginsProvider;

  private final Provider<StaticInjector> staticInjectorProvider;

  public MainApp_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<PluginStore> pluginStoreProvider, Provider<AAPSLogger> aapsLoggerProvider,
      Provider<ActivityMonitor> activityMonitorProvider,
      Provider<VersionCheckerUtils> versionCheckersUtilsProvider, Provider<SP> spProvider,
      Provider<NSUpload> nsUploadProvider, Provider<Config> configProvider,
      Provider<ConfigBuilderPlugin> configBuilderPluginProvider,
      Provider<KeepAliveReceiver.KeepAliveManager> keepAliveManagerProvider,
      Provider<List<PluginBase>> pluginsProvider, Provider<StaticInjector> staticInjectorProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.pluginStoreProvider = pluginStoreProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.activityMonitorProvider = activityMonitorProvider;
    this.versionCheckersUtilsProvider = versionCheckersUtilsProvider;
    this.spProvider = spProvider;
    this.nsUploadProvider = nsUploadProvider;
    this.configProvider = configProvider;
    this.configBuilderPluginProvider = configBuilderPluginProvider;
    this.keepAliveManagerProvider = keepAliveManagerProvider;
    this.pluginsProvider = pluginsProvider;
    this.staticInjectorProvider = staticInjectorProvider;
  }

  public static MembersInjector<MainApp> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<PluginStore> pluginStoreProvider, Provider<AAPSLogger> aapsLoggerProvider,
      Provider<ActivityMonitor> activityMonitorProvider,
      Provider<VersionCheckerUtils> versionCheckersUtilsProvider, Provider<SP> spProvider,
      Provider<NSUpload> nsUploadProvider, Provider<Config> configProvider,
      Provider<ConfigBuilderPlugin> configBuilderPluginProvider,
      Provider<KeepAliveReceiver.KeepAliveManager> keepAliveManagerProvider,
      Provider<List<PluginBase>> pluginsProvider, Provider<StaticInjector> staticInjectorProvider) {
    return new MainApp_MembersInjector(androidInjectorProvider, pluginStoreProvider, aapsLoggerProvider, activityMonitorProvider, versionCheckersUtilsProvider, spProvider, nsUploadProvider, configProvider, configBuilderPluginProvider, keepAliveManagerProvider, pluginsProvider, staticInjectorProvider);
  }

  @Override
  public void injectMembers(MainApp instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectPluginStore(instance, pluginStoreProvider.get());
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectActivityMonitor(instance, activityMonitorProvider.get());
    injectVersionCheckersUtils(instance, versionCheckersUtilsProvider.get());
    injectSp(instance, spProvider.get());
    injectNsUpload(instance, nsUploadProvider.get());
    injectConfig(instance, configProvider.get());
    injectConfigBuilderPlugin(instance, configBuilderPluginProvider.get());
    injectKeepAliveManager(instance, keepAliveManagerProvider.get());
    injectPlugins(instance, pluginsProvider.get());
    injectStaticInjector(instance, staticInjectorProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.pluginStore")
  public static void injectPluginStore(MainApp instance, PluginStore pluginStore) {
    instance.pluginStore = pluginStore;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.aapsLogger")
  public static void injectAapsLogger(MainApp instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.activityMonitor")
  public static void injectActivityMonitor(MainApp instance, ActivityMonitor activityMonitor) {
    instance.activityMonitor = activityMonitor;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.versionCheckersUtils")
  public static void injectVersionCheckersUtils(MainApp instance,
      VersionCheckerUtils versionCheckersUtils) {
    instance.versionCheckersUtils = versionCheckersUtils;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.sp")
  public static void injectSp(MainApp instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.nsUpload")
  public static void injectNsUpload(MainApp instance, NSUpload nsUpload) {
    instance.nsUpload = nsUpload;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.config")
  public static void injectConfig(MainApp instance, Config config) {
    instance.config = config;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.configBuilderPlugin")
  public static void injectConfigBuilderPlugin(MainApp instance,
      ConfigBuilderPlugin configBuilderPlugin) {
    instance.configBuilderPlugin = configBuilderPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.keepAliveManager")
  public static void injectKeepAliveManager(MainApp instance,
      KeepAliveReceiver.KeepAliveManager keepAliveManager) {
    instance.keepAliveManager = keepAliveManager;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.plugins")
  public static void injectPlugins(MainApp instance, List<PluginBase> plugins) {
    instance.plugins = plugins;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.MainApp.staticInjector")
  public static void injectStaticInjector(MainApp instance, StaticInjector staticInjector) {
    instance.staticInjector = staticInjector;
  }
}
