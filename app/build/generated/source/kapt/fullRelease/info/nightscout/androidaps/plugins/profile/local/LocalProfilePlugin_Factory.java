// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.profile.local;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.general.nsclient.NSUpload;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LocalProfilePlugin_Factory implements Factory<LocalProfilePlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<NSUpload> nsUploadProvider;

  public LocalProfilePlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<NSUpload> nsUploadProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.nsUploadProvider = nsUploadProvider;
  }

  @Override
  public LocalProfilePlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), rxBusProvider.get(), resourceHelperProvider.get(), spProvider.get(), profileFunctionProvider.get(), nsUploadProvider.get());
  }

  public static LocalProfilePlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<NSUpload> nsUploadProvider) {
    return new LocalProfilePlugin_Factory(injectorProvider, aapsLoggerProvider, rxBusProvider, resourceHelperProvider, spProvider, profileFunctionProvider, nsUploadProvider);
  }

  public static LocalProfilePlugin newInstance(HasAndroidInjector injector, AAPSLogger aapsLogger,
      RxBusWrapper rxBus, ResourceHelper resourceHelper, SP sp, ProfileFunction profileFunction,
      NSUpload nsUpload) {
    return new LocalProfilePlugin(injector, aapsLogger, rxBus, resourceHelper, sp, profileFunction, nsUpload);
  }
}
