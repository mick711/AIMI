// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.setupwizard;

import android.content.Context;
import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.CommandQueueProvider;
import info.nightscout.androidaps.interfaces.ImportExportPrefsInterface;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderPlugin;
import info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesPlugin;
import info.nightscout.androidaps.plugins.general.nsclient.NSClientPlugin;
import info.nightscout.androidaps.plugins.profile.local.LocalProfilePlugin;
import info.nightscout.androidaps.plugins.profile.ns.NSProfilePlugin;
import info.nightscout.androidaps.utils.AndroidPermission;
import info.nightscout.androidaps.utils.CryptoUtil;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SWDefinition_Factory implements Factory<SWDefinition> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<Context> contextProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<LocalProfilePlugin> localProfilePluginProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<CommandQueueProvider> commandQueueProvider;

  private final Provider<ObjectivesPlugin> objectivesPluginProvider;

  private final Provider<ConfigBuilderPlugin> configBuilderPluginProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<NSClientPlugin> nsClientPluginProvider;

  private final Provider<NSProfilePlugin> nsProfilePluginProvider;

  private final Provider<ImportExportPrefsInterface> importExportPrefsProvider;

  private final Provider<AndroidPermission> androidPermissionProvider;

  private final Provider<CryptoUtil> cryptoUtilProvider;

  private final Provider<Config> configProvider;

  public SWDefinition_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<Context> contextProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<LocalProfilePlugin> localProfilePluginProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<CommandQueueProvider> commandQueueProvider,
      Provider<ObjectivesPlugin> objectivesPluginProvider,
      Provider<ConfigBuilderPlugin> configBuilderPluginProvider,
      Provider<LoopPlugin> loopPluginProvider, Provider<NSClientPlugin> nsClientPluginProvider,
      Provider<NSProfilePlugin> nsProfilePluginProvider,
      Provider<ImportExportPrefsInterface> importExportPrefsProvider,
      Provider<AndroidPermission> androidPermissionProvider,
      Provider<CryptoUtil> cryptoUtilProvider, Provider<Config> configProvider) {
    this.injectorProvider = injectorProvider;
    this.rxBusProvider = rxBusProvider;
    this.contextProvider = contextProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.localProfilePluginProvider = localProfilePluginProvider;
    this.activePluginProvider = activePluginProvider;
    this.commandQueueProvider = commandQueueProvider;
    this.objectivesPluginProvider = objectivesPluginProvider;
    this.configBuilderPluginProvider = configBuilderPluginProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.nsClientPluginProvider = nsClientPluginProvider;
    this.nsProfilePluginProvider = nsProfilePluginProvider;
    this.importExportPrefsProvider = importExportPrefsProvider;
    this.androidPermissionProvider = androidPermissionProvider;
    this.cryptoUtilProvider = cryptoUtilProvider;
    this.configProvider = configProvider;
  }

  @Override
  public SWDefinition get() {
    return newInstance(injectorProvider.get(), rxBusProvider.get(), contextProvider.get(), resourceHelperProvider.get(), spProvider.get(), profileFunctionProvider.get(), localProfilePluginProvider.get(), activePluginProvider.get(), commandQueueProvider.get(), objectivesPluginProvider.get(), configBuilderPluginProvider.get(), loopPluginProvider.get(), nsClientPluginProvider.get(), nsProfilePluginProvider.get(), importExportPrefsProvider.get(), androidPermissionProvider.get(), cryptoUtilProvider.get(), configProvider.get());
  }

  public static SWDefinition_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<Context> contextProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<LocalProfilePlugin> localProfilePluginProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<CommandQueueProvider> commandQueueProvider,
      Provider<ObjectivesPlugin> objectivesPluginProvider,
      Provider<ConfigBuilderPlugin> configBuilderPluginProvider,
      Provider<LoopPlugin> loopPluginProvider, Provider<NSClientPlugin> nsClientPluginProvider,
      Provider<NSProfilePlugin> nsProfilePluginProvider,
      Provider<ImportExportPrefsInterface> importExportPrefsProvider,
      Provider<AndroidPermission> androidPermissionProvider,
      Provider<CryptoUtil> cryptoUtilProvider, Provider<Config> configProvider) {
    return new SWDefinition_Factory(injectorProvider, rxBusProvider, contextProvider, resourceHelperProvider, spProvider, profileFunctionProvider, localProfilePluginProvider, activePluginProvider, commandQueueProvider, objectivesPluginProvider, configBuilderPluginProvider, loopPluginProvider, nsClientPluginProvider, nsProfilePluginProvider, importExportPrefsProvider, androidPermissionProvider, cryptoUtilProvider, configProvider);
  }

  public static SWDefinition newInstance(HasAndroidInjector injector, RxBusWrapper rxBus,
      Context context, ResourceHelper resourceHelper, SP sp, ProfileFunction profileFunction,
      LocalProfilePlugin localProfilePlugin, ActivePluginProvider activePlugin,
      CommandQueueProvider commandQueue, ObjectivesPlugin objectivesPlugin,
      ConfigBuilderPlugin configBuilderPlugin, LoopPlugin loopPlugin, NSClientPlugin nsClientPlugin,
      NSProfilePlugin nsProfilePlugin, ImportExportPrefsInterface importExportPrefs,
      AndroidPermission androidPermission, CryptoUtil cryptoUtil, Config config) {
    return new SWDefinition(injector, rxBus, context, resourceHelper, sp, profileFunction, localProfilePlugin, activePlugin, commandQueue, objectivesPlugin, configBuilderPlugin, loopPlugin, nsClientPlugin, nsProfilePlugin, importExportPrefs, androidPermission, cryptoUtil, config);
  }
}
