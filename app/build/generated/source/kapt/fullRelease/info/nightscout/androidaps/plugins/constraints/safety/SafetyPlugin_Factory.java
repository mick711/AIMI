// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.constraints.safety;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.openAPSAMA.OpenAPSAMAPlugin;
import info.nightscout.androidaps.plugins.aps.openAPSSMB.OpenAPSSMBPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.configBuilder.ConstraintChecker;
import info.nightscout.androidaps.plugins.sensitivity.SensitivityOref1Plugin;
import info.nightscout.androidaps.plugins.treatments.TreatmentsPlugin;
import info.nightscout.androidaps.utils.HardLimits;
import info.nightscout.androidaps.utils.buildHelper.BuildHelper;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SafetyPlugin_Factory implements Factory<SafetyPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ConstraintChecker> constraintCheckerProvider;

  private final Provider<OpenAPSAMAPlugin> openAPSAMAPluginProvider;

  private final Provider<OpenAPSSMBPlugin> openAPSSMBPluginProvider;

  private final Provider<SensitivityOref1Plugin> sensitivityOref1PluginProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<HardLimits> hardLimitsProvider;

  private final Provider<BuildHelper> buildHelperProvider;

  private final Provider<TreatmentsPlugin> treatmentsPluginProvider;

  private final Provider<Config> configProvider;

  public SafetyPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<OpenAPSAMAPlugin> openAPSAMAPluginProvider,
      Provider<OpenAPSSMBPlugin> openAPSSMBPluginProvider,
      Provider<SensitivityOref1Plugin> sensitivityOref1PluginProvider,
      Provider<ActivePluginProvider> activePluginProvider, Provider<HardLimits> hardLimitsProvider,
      Provider<BuildHelper> buildHelperProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider, Provider<Config> configProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.rxBusProvider = rxBusProvider;
    this.constraintCheckerProvider = constraintCheckerProvider;
    this.openAPSAMAPluginProvider = openAPSAMAPluginProvider;
    this.openAPSSMBPluginProvider = openAPSSMBPluginProvider;
    this.sensitivityOref1PluginProvider = sensitivityOref1PluginProvider;
    this.activePluginProvider = activePluginProvider;
    this.hardLimitsProvider = hardLimitsProvider;
    this.buildHelperProvider = buildHelperProvider;
    this.treatmentsPluginProvider = treatmentsPluginProvider;
    this.configProvider = configProvider;
  }

  @Override
  public SafetyPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), resourceHelperProvider.get(), spProvider.get(), rxBusProvider.get(), constraintCheckerProvider.get(), openAPSAMAPluginProvider.get(), openAPSSMBPluginProvider.get(), sensitivityOref1PluginProvider.get(), activePluginProvider.get(), hardLimitsProvider.get(), buildHelperProvider.get(), treatmentsPluginProvider.get(), configProvider.get());
  }

  public static SafetyPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<OpenAPSAMAPlugin> openAPSAMAPluginProvider,
      Provider<OpenAPSSMBPlugin> openAPSSMBPluginProvider,
      Provider<SensitivityOref1Plugin> sensitivityOref1PluginProvider,
      Provider<ActivePluginProvider> activePluginProvider, Provider<HardLimits> hardLimitsProvider,
      Provider<BuildHelper> buildHelperProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider, Provider<Config> configProvider) {
    return new SafetyPlugin_Factory(injectorProvider, aapsLoggerProvider, resourceHelperProvider, spProvider, rxBusProvider, constraintCheckerProvider, openAPSAMAPluginProvider, openAPSSMBPluginProvider, sensitivityOref1PluginProvider, activePluginProvider, hardLimitsProvider, buildHelperProvider, treatmentsPluginProvider, configProvider);
  }

  public static SafetyPlugin newInstance(HasAndroidInjector injector, AAPSLogger aapsLogger,
      ResourceHelper resourceHelper, SP sp, RxBusWrapper rxBus, ConstraintChecker constraintChecker,
      OpenAPSAMAPlugin openAPSAMAPlugin, OpenAPSSMBPlugin openAPSSMBPlugin,
      SensitivityOref1Plugin sensitivityOref1Plugin, ActivePluginProvider activePlugin,
      HardLimits hardLimits, BuildHelper buildHelper, TreatmentsPlugin treatmentsPlugin,
      Config config) {
    return new SafetyPlugin(injector, aapsLogger, resourceHelper, sp, rxBus, constraintChecker, openAPSAMAPlugin, openAPSSMBPlugin, sensitivityOref1Plugin, activePlugin, hardLimits, buildHelper, treatmentsPlugin, config);
  }
}
