// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.treatments;

import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.interfaces.DatabaseHelperInterface;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.general.openhumans.OpenHumansUploader;
import info.nightscout.androidaps.plugins.pump.medtronic.MedtronicPumpPlugin;
import info.nightscout.androidaps.utils.FabricPrivacy;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TreatmentService_MembersInjector implements MembersInjector<TreatmentService> {
  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<MedtronicPumpPlugin> medtronicPumpPluginProvider;

  private final Provider<DatabaseHelperInterface> databaseHelperProvider;

  private final Provider<OpenHumansUploader> openHumansUploaderProvider;

  public TreatmentService_MembersInjector(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<MedtronicPumpPlugin> medtronicPumpPluginProvider,
      Provider<DatabaseHelperInterface> databaseHelperProvider,
      Provider<OpenHumansUploader> openHumansUploaderProvider) {
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.rxBusProvider = rxBusProvider;
    this.medtronicPumpPluginProvider = medtronicPumpPluginProvider;
    this.databaseHelperProvider = databaseHelperProvider;
    this.openHumansUploaderProvider = openHumansUploaderProvider;
  }

  public static MembersInjector<TreatmentService> create(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<MedtronicPumpPlugin> medtronicPumpPluginProvider,
      Provider<DatabaseHelperInterface> databaseHelperProvider,
      Provider<OpenHumansUploader> openHumansUploaderProvider) {
    return new TreatmentService_MembersInjector(aapsLoggerProvider, fabricPrivacyProvider, rxBusProvider, medtronicPumpPluginProvider, databaseHelperProvider, openHumansUploaderProvider);
  }

  @Override
  public void injectMembers(TreatmentService instance) {
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectMedtronicPumpPlugin(instance, medtronicPumpPluginProvider.get());
    injectDatabaseHelper(instance, databaseHelperProvider.get());
    injectOpenHumansUploader(instance, openHumansUploaderProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentService.aapsLogger")
  public static void injectAapsLogger(TreatmentService instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentService.fabricPrivacy")
  public static void injectFabricPrivacy(TreatmentService instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentService.rxBus")
  public static void injectRxBus(TreatmentService instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentService.medtronicPumpPlugin")
  public static void injectMedtronicPumpPlugin(TreatmentService instance,
      MedtronicPumpPlugin medtronicPumpPlugin) {
    instance.medtronicPumpPlugin = medtronicPumpPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentService.databaseHelper")
  public static void injectDatabaseHelper(TreatmentService instance,
      DatabaseHelperInterface databaseHelper) {
    instance.databaseHelper = databaseHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentService.openHumansUploader")
  public static void injectOpenHumansUploader(TreatmentService instance,
      OpenHumansUploader openHumansUploader) {
    instance.openHumansUploader = openHumansUploader;
  }
}
