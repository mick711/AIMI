// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.smsCommunicator;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.CommandQueueProvider;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.configBuilder.ConstraintChecker;
import info.nightscout.androidaps.plugins.general.smsCommunicator.otp.OneTimePassword;
import info.nightscout.androidaps.plugins.iob.iobCobCalculator.IobCobCalculatorPlugin;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.XdripCalibrations;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SmsCommunicatorPlugin_Factory implements Factory<SmsCommunicatorPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<ConstraintChecker> constraintCheckerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<CommandQueueProvider> commandQueueProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider;

  private final Provider<XdripCalibrations> xdripCalibrationsProvider;

  private final Provider<OneTimePassword> otpProvider;

  private final Provider<Config> configProvider;

  private final Provider<DateUtil> dateUtilProvider;

  public SmsCommunicatorPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ProfileFunction> profileFunctionProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<CommandQueueProvider> commandQueueProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<XdripCalibrations> xdripCalibrationsProvider, Provider<OneTimePassword> otpProvider,
      Provider<Config> configProvider, Provider<DateUtil> dateUtilProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.constraintCheckerProvider = constraintCheckerProvider;
    this.rxBusProvider = rxBusProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.activePluginProvider = activePluginProvider;
    this.commandQueueProvider = commandQueueProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.iobCobCalculatorPluginProvider = iobCobCalculatorPluginProvider;
    this.xdripCalibrationsProvider = xdripCalibrationsProvider;
    this.otpProvider = otpProvider;
    this.configProvider = configProvider;
    this.dateUtilProvider = dateUtilProvider;
  }

  @Override
  public SmsCommunicatorPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), resourceHelperProvider.get(), spProvider.get(), constraintCheckerProvider.get(), rxBusProvider.get(), profileFunctionProvider.get(), fabricPrivacyProvider.get(), activePluginProvider.get(), commandQueueProvider.get(), loopPluginProvider.get(), iobCobCalculatorPluginProvider.get(), xdripCalibrationsProvider.get(), otpProvider.get(), configProvider.get(), dateUtilProvider.get());
  }

  public static SmsCommunicatorPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ProfileFunction> profileFunctionProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<CommandQueueProvider> commandQueueProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<XdripCalibrations> xdripCalibrationsProvider, Provider<OneTimePassword> otpProvider,
      Provider<Config> configProvider, Provider<DateUtil> dateUtilProvider) {
    return new SmsCommunicatorPlugin_Factory(injectorProvider, aapsLoggerProvider, resourceHelperProvider, spProvider, constraintCheckerProvider, rxBusProvider, profileFunctionProvider, fabricPrivacyProvider, activePluginProvider, commandQueueProvider, loopPluginProvider, iobCobCalculatorPluginProvider, xdripCalibrationsProvider, otpProvider, configProvider, dateUtilProvider);
  }

  public static SmsCommunicatorPlugin newInstance(HasAndroidInjector injector,
      AAPSLogger aapsLogger, ResourceHelper resourceHelper, SP sp,
      ConstraintChecker constraintChecker, RxBusWrapper rxBus, ProfileFunction profileFunction,
      FabricPrivacy fabricPrivacy, ActivePluginProvider activePlugin,
      CommandQueueProvider commandQueue, LoopPlugin loopPlugin,
      IobCobCalculatorPlugin iobCobCalculatorPlugin, XdripCalibrations xdripCalibrations,
      OneTimePassword otp, Config config, DateUtil dateUtil) {
    return new SmsCommunicatorPlugin(injector, aapsLogger, resourceHelper, sp, constraintChecker, rxBus, profileFunction, fabricPrivacy, activePlugin, commandQueue, loopPlugin, iobCobCalculatorPlugin, xdripCalibrations, otp, config, dateUtil);
  }
}
