// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.pump.mdi;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.interfaces.CommandQueueProvider;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.treatments.TreatmentsPlugin;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MDIPlugin_Factory implements Factory<MDIPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<CommandQueueProvider> commandQueueProvider;

  private final Provider<TreatmentsPlugin> treatmentsPluginProvider;

  public MDIPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<CommandQueueProvider> commandQueueProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.commandQueueProvider = commandQueueProvider;
    this.treatmentsPluginProvider = treatmentsPluginProvider;
  }

  @Override
  public MDIPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), rxBusProvider.get(), resourceHelperProvider.get(), commandQueueProvider.get(), treatmentsPluginProvider.get());
  }

  public static MDIPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<CommandQueueProvider> commandQueueProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider) {
    return new MDIPlugin_Factory(injectorProvider, aapsLoggerProvider, rxBusProvider, resourceHelperProvider, commandQueueProvider, treatmentsPluginProvider);
  }

  public static MDIPlugin newInstance(HasAndroidInjector injector, AAPSLogger aapsLogger,
      RxBusWrapper rxBus, ResourceHelper resourceHelper, CommandQueueProvider commandQueue,
      TreatmentsPlugin treatmentsPlugin) {
    return new MDIPlugin(injector, aapsLogger, rxBus, resourceHelper, commandQueue, treatmentsPlugin);
  }
}
