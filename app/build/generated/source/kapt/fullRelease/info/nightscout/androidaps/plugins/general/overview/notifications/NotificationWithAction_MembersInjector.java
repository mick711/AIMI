// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.overview.notifications;

import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.general.nsclient.NSClientPlugin;
import info.nightscout.androidaps.utils.DefaultValueHelper;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NotificationWithAction_MembersInjector implements MembersInjector<NotificationWithAction> {
  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<DefaultValueHelper> defaultValueHelperProvider;

  private final Provider<NSClientPlugin> nsClientPluginProvider;

  public NotificationWithAction_MembersInjector(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider,
      Provider<DefaultValueHelper> defaultValueHelperProvider,
      Provider<NSClientPlugin> nsClientPluginProvider) {
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.defaultValueHelperProvider = defaultValueHelperProvider;
    this.nsClientPluginProvider = nsClientPluginProvider;
  }

  public static MembersInjector<NotificationWithAction> create(
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<DefaultValueHelper> defaultValueHelperProvider,
      Provider<NSClientPlugin> nsClientPluginProvider) {
    return new NotificationWithAction_MembersInjector(aapsLoggerProvider, resourceHelperProvider, spProvider, defaultValueHelperProvider, nsClientPluginProvider);
  }

  @Override
  public void injectMembers(NotificationWithAction instance) {
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectSp(instance, spProvider.get());
    injectDefaultValueHelper(instance, defaultValueHelperProvider.get());
    injectNsClientPlugin(instance, nsClientPluginProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.notifications.NotificationWithAction.aapsLogger")
  public static void injectAapsLogger(NotificationWithAction instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.notifications.NotificationWithAction.resourceHelper")
  public static void injectResourceHelper(NotificationWithAction instance,
      ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.notifications.NotificationWithAction.sp")
  public static void injectSp(NotificationWithAction instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.notifications.NotificationWithAction.defaultValueHelper")
  public static void injectDefaultValueHelper(NotificationWithAction instance,
      DefaultValueHelper defaultValueHelper) {
    instance.defaultValueHelper = defaultValueHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.notifications.NotificationWithAction.nsClientPlugin")
  public static void injectNsClientPlugin(NotificationWithAction instance,
      NSClientPlugin nsClientPlugin) {
    instance.nsClientPlugin = nsClientPlugin;
  }
}
