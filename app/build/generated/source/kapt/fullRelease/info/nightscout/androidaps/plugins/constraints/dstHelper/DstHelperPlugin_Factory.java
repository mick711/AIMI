// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.constraints.dstHelper;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DstHelperPlugin_Factory implements Factory<DstHelperPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  public DstHelperPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<LoopPlugin> loopPluginProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.activePluginProvider = activePluginProvider;
    this.loopPluginProvider = loopPluginProvider;
  }

  @Override
  public DstHelperPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), rxBusProvider.get(), resourceHelperProvider.get(), spProvider.get(), activePluginProvider.get(), loopPluginProvider.get());
  }

  public static DstHelperPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<LoopPlugin> loopPluginProvider) {
    return new DstHelperPlugin_Factory(injectorProvider, aapsLoggerProvider, rxBusProvider, resourceHelperProvider, spProvider, activePluginProvider, loopPluginProvider);
  }

  public static DstHelperPlugin newInstance(HasAndroidInjector injector, AAPSLogger aapsLogger,
      RxBusWrapper rxBus, ResourceHelper resourceHelper, SP sp, ActivePluginProvider activePlugin,
      LoopPlugin loopPlugin) {
    return new DstHelperPlugin(injector, aapsLogger, rxBus, resourceHelper, sp, activePlugin, loopPlugin);
  }
}
