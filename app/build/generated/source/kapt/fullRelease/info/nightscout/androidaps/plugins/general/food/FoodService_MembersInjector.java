// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.food;

import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.utils.FabricPrivacy;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FoodService_MembersInjector implements MembersInjector<FoodService> {
  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  public FoodService_MembersInjector(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<FabricPrivacy> fabricPrivacyProvider) {
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
  }

  public static MembersInjector<FoodService> create(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<FabricPrivacy> fabricPrivacyProvider) {
    return new FoodService_MembersInjector(aapsLoggerProvider, rxBusProvider, fabricPrivacyProvider);
  }

  @Override
  public void injectMembers(FoodService instance) {
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.food.FoodService.aapsLogger")
  public static void injectAapsLogger(FoodService instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.food.FoodService.rxBus")
  public static void injectRxBus(FoodService instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.food.FoodService.fabricPrivacy")
  public static void injectFabricPrivacy(FoodService instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }
}
