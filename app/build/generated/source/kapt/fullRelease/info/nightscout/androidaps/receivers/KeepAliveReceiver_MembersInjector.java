// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.receivers;

import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.CommandQueueProvider;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.general.nsclient.NSUpload;
import info.nightscout.androidaps.plugins.iob.iobCobCalculator.IobCobCalculatorPlugin;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.LocalAlertUtils;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class KeepAliveReceiver_MembersInjector implements MembersInjector<KeepAliveReceiver> {
  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<CommandQueueProvider> commandQueueProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider;

  private final Provider<LocalAlertUtils> localAlertUtilsProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<ReceiverStatusStore> receiverStatusStoreProvider;

  private final Provider<Config> configProvider;

  private final Provider<NSUpload> nsUploadProvider;

  private final Provider<DateUtil> dateUtilProvider;

  public KeepAliveReceiver_MembersInjector(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ActivePluginProvider> activePluginProvider,
      Provider<CommandQueueProvider> commandQueueProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<LocalAlertUtils> localAlertUtilsProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ReceiverStatusStore> receiverStatusStoreProvider, Provider<Config> configProvider,
      Provider<NSUpload> nsUploadProvider, Provider<DateUtil> dateUtilProvider) {
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.rxBusProvider = rxBusProvider;
    this.activePluginProvider = activePluginProvider;
    this.commandQueueProvider = commandQueueProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.iobCobCalculatorPluginProvider = iobCobCalculatorPluginProvider;
    this.localAlertUtilsProvider = localAlertUtilsProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.receiverStatusStoreProvider = receiverStatusStoreProvider;
    this.configProvider = configProvider;
    this.nsUploadProvider = nsUploadProvider;
    this.dateUtilProvider = dateUtilProvider;
  }

  public static MembersInjector<KeepAliveReceiver> create(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ActivePluginProvider> activePluginProvider,
      Provider<CommandQueueProvider> commandQueueProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<LocalAlertUtils> localAlertUtilsProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ReceiverStatusStore> receiverStatusStoreProvider, Provider<Config> configProvider,
      Provider<NSUpload> nsUploadProvider, Provider<DateUtil> dateUtilProvider) {
    return new KeepAliveReceiver_MembersInjector(aapsLoggerProvider, rxBusProvider, activePluginProvider, commandQueueProvider, profileFunctionProvider, loopPluginProvider, iobCobCalculatorPluginProvider, localAlertUtilsProvider, fabricPrivacyProvider, receiverStatusStoreProvider, configProvider, nsUploadProvider, dateUtilProvider);
  }

  @Override
  public void injectMembers(KeepAliveReceiver instance) {
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectActivePlugin(instance, activePluginProvider.get());
    injectCommandQueue(instance, commandQueueProvider.get());
    injectProfileFunction(instance, profileFunctionProvider.get());
    injectLoopPlugin(instance, loopPluginProvider.get());
    injectIobCobCalculatorPlugin(instance, iobCobCalculatorPluginProvider.get());
    injectLocalAlertUtils(instance, localAlertUtilsProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectReceiverStatusStore(instance, receiverStatusStoreProvider.get());
    injectConfig(instance, configProvider.get());
    injectNsUpload(instance, nsUploadProvider.get());
    injectDateUtil(instance, dateUtilProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.aapsLogger")
  public static void injectAapsLogger(KeepAliveReceiver instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.rxBus")
  public static void injectRxBus(KeepAliveReceiver instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.activePlugin")
  public static void injectActivePlugin(KeepAliveReceiver instance,
      ActivePluginProvider activePlugin) {
    instance.activePlugin = activePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.commandQueue")
  public static void injectCommandQueue(KeepAliveReceiver instance,
      CommandQueueProvider commandQueue) {
    instance.commandQueue = commandQueue;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.profileFunction")
  public static void injectProfileFunction(KeepAliveReceiver instance,
      ProfileFunction profileFunction) {
    instance.profileFunction = profileFunction;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.loopPlugin")
  public static void injectLoopPlugin(KeepAliveReceiver instance, LoopPlugin loopPlugin) {
    instance.loopPlugin = loopPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.iobCobCalculatorPlugin")
  public static void injectIobCobCalculatorPlugin(KeepAliveReceiver instance,
      IobCobCalculatorPlugin iobCobCalculatorPlugin) {
    instance.iobCobCalculatorPlugin = iobCobCalculatorPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.localAlertUtils")
  public static void injectLocalAlertUtils(KeepAliveReceiver instance,
      LocalAlertUtils localAlertUtils) {
    instance.localAlertUtils = localAlertUtils;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.fabricPrivacy")
  public static void injectFabricPrivacy(KeepAliveReceiver instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.receiverStatusStore")
  public static void injectReceiverStatusStore(KeepAliveReceiver instance,
      ReceiverStatusStore receiverStatusStore) {
    instance.receiverStatusStore = receiverStatusStore;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.config")
  public static void injectConfig(KeepAliveReceiver instance, Config config) {
    instance.config = config;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.nsUpload")
  public static void injectNsUpload(KeepAliveReceiver instance, NSUpload nsUpload) {
    instance.nsUpload = nsUpload;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.KeepAliveReceiver.dateUtil")
  public static void injectDateUtil(KeepAliveReceiver instance, DateUtil dateUtil) {
    instance.dateUtil = dateUtil;
  }
}
