// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.iob.iobCobCalculator;

import android.content.Context;
import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.events.Event;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.sensitivity.SensitivityAAPSPlugin;
import info.nightscout.androidaps.plugins.sensitivity.SensitivityWeightedAveragePlugin;
import info.nightscout.androidaps.plugins.treatments.TreatmentsPlugin;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.Profiler;
import info.nightscout.androidaps.utils.buildHelper.BuildHelper;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class IobCobThread_Factory implements Factory<IobCobThread> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider;

  private final Provider<TreatmentsPlugin> treatmentsPluginProvider;

  private final Provider<String> fromProvider;

  private final Provider<Long> endProvider;

  private final Provider<Boolean> bgDataReloadProvider;

  private final Provider<Boolean> limitDataToOldestAvailableProvider;

  private final Provider<Event> causeProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<SP> spProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<Context> contextProvider;

  private final Provider<SensitivityAAPSPlugin> sensitivityAAPSPluginProvider;

  private final Provider<SensitivityWeightedAveragePlugin> sensitivityWeightedAveragePluginProvider;

  private final Provider<BuildHelper> buildHelperProvider;

  private final Provider<Profiler> profilerProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<DateUtil> dateUtilProvider;

  public IobCobThread_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider, Provider<String> fromProvider,
      Provider<Long> endProvider, Provider<Boolean> bgDataReloadProvider,
      Provider<Boolean> limitDataToOldestAvailableProvider, Provider<Event> causeProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<SP> spProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<Context> contextProvider,
      Provider<SensitivityAAPSPlugin> sensitivityAAPSPluginProvider,
      Provider<SensitivityWeightedAveragePlugin> sensitivityWeightedAveragePluginProvider,
      Provider<BuildHelper> buildHelperProvider, Provider<Profiler> profilerProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<DateUtil> dateUtilProvider) {
    this.injectorProvider = injectorProvider;
    this.iobCobCalculatorPluginProvider = iobCobCalculatorPluginProvider;
    this.treatmentsPluginProvider = treatmentsPluginProvider;
    this.fromProvider = fromProvider;
    this.endProvider = endProvider;
    this.bgDataReloadProvider = bgDataReloadProvider;
    this.limitDataToOldestAvailableProvider = limitDataToOldestAvailableProvider;
    this.causeProvider = causeProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.spProvider = spProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.contextProvider = contextProvider;
    this.sensitivityAAPSPluginProvider = sensitivityAAPSPluginProvider;
    this.sensitivityWeightedAveragePluginProvider = sensitivityWeightedAveragePluginProvider;
    this.buildHelperProvider = buildHelperProvider;
    this.profilerProvider = profilerProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.dateUtilProvider = dateUtilProvider;
  }

  @Override
  public IobCobThread get() {
    IobCobThread instance = newInstance(injectorProvider.get(), iobCobCalculatorPluginProvider.get(), treatmentsPluginProvider.get(), fromProvider.get(), endProvider.get(), bgDataReloadProvider.get(), limitDataToOldestAvailableProvider.get(), causeProvider.get());
    IobCobThread_MembersInjector.injectAapsLogger(instance, aapsLoggerProvider.get());
    IobCobThread_MembersInjector.injectSp(instance, spProvider.get());
    IobCobThread_MembersInjector.injectRxBus(instance, rxBusProvider.get());
    IobCobThread_MembersInjector.injectResourceHelper(instance, resourceHelperProvider.get());
    IobCobThread_MembersInjector.injectProfileFunction(instance, profileFunctionProvider.get());
    IobCobThread_MembersInjector.injectContext(instance, contextProvider.get());
    IobCobThread_MembersInjector.injectSensitivityAAPSPlugin(instance, sensitivityAAPSPluginProvider.get());
    IobCobThread_MembersInjector.injectSensitivityWeightedAveragePlugin(instance, sensitivityWeightedAveragePluginProvider.get());
    IobCobThread_MembersInjector.injectBuildHelper(instance, buildHelperProvider.get());
    IobCobThread_MembersInjector.injectProfiler(instance, profilerProvider.get());
    IobCobThread_MembersInjector.injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    IobCobThread_MembersInjector.injectDateUtil(instance, dateUtilProvider.get());
    return instance;
  }

  public static IobCobThread_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider, Provider<String> fromProvider,
      Provider<Long> endProvider, Provider<Boolean> bgDataReloadProvider,
      Provider<Boolean> limitDataToOldestAvailableProvider, Provider<Event> causeProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<SP> spProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<ProfileFunction> profileFunctionProvider, Provider<Context> contextProvider,
      Provider<SensitivityAAPSPlugin> sensitivityAAPSPluginProvider,
      Provider<SensitivityWeightedAveragePlugin> sensitivityWeightedAveragePluginProvider,
      Provider<BuildHelper> buildHelperProvider, Provider<Profiler> profilerProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<DateUtil> dateUtilProvider) {
    return new IobCobThread_Factory(injectorProvider, iobCobCalculatorPluginProvider, treatmentsPluginProvider, fromProvider, endProvider, bgDataReloadProvider, limitDataToOldestAvailableProvider, causeProvider, aapsLoggerProvider, spProvider, rxBusProvider, resourceHelperProvider, profileFunctionProvider, contextProvider, sensitivityAAPSPluginProvider, sensitivityWeightedAveragePluginProvider, buildHelperProvider, profilerProvider, fabricPrivacyProvider, dateUtilProvider);
  }

  public static IobCobThread newInstance(HasAndroidInjector injector,
      IobCobCalculatorPlugin iobCobCalculatorPlugin, TreatmentsPlugin treatmentsPlugin, String from,
      long end, boolean bgDataReload, boolean limitDataToOldestAvailable, Event cause) {
    return new IobCobThread(injector, iobCobCalculatorPlugin, treatmentsPlugin, from, end, bgDataReload, limitDataToOldestAvailable, cause);
  }
}
