// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.nsclient.services;

import dagger.MembersInjector;
import dagger.android.HasAndroidInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.interfaces.DatabaseHelperInterface;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.general.nsclient.NSClientPlugin;
import info.nightscout.androidaps.plugins.general.nsclient.UploadQueue;
import info.nightscout.androidaps.plugins.general.nsclient.data.NSDeviceStatus;
import info.nightscout.androidaps.plugins.general.nsclient.data.NSSettingsStatus;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.buildHelper.BuildHelper;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NSClientService_MembersInjector implements MembersInjector<NSClientService> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<NSSettingsStatus> nsSettingsStatusProvider;

  private final Provider<NSDeviceStatus> nsDeviceStatusProvider;

  private final Provider<DatabaseHelperInterface> databaseHelperProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<NSClientPlugin> nsClientPluginProvider;

  private final Provider<BuildHelper> buildHelperProvider;

  private final Provider<Config> configProvider;

  private final Provider<DateUtil> dateUtilProvider;

  private final Provider<UploadQueue> uploadQueueProvider;

  public NSClientService_MembersInjector(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<NSSettingsStatus> nsSettingsStatusProvider,
      Provider<NSDeviceStatus> nsDeviceStatusProvider,
      Provider<DatabaseHelperInterface> databaseHelperProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<NSClientPlugin> nsClientPluginProvider, Provider<BuildHelper> buildHelperProvider,
      Provider<Config> configProvider, Provider<DateUtil> dateUtilProvider,
      Provider<UploadQueue> uploadQueueProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.nsSettingsStatusProvider = nsSettingsStatusProvider;
    this.nsDeviceStatusProvider = nsDeviceStatusProvider;
    this.databaseHelperProvider = databaseHelperProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.nsClientPluginProvider = nsClientPluginProvider;
    this.buildHelperProvider = buildHelperProvider;
    this.configProvider = configProvider;
    this.dateUtilProvider = dateUtilProvider;
    this.uploadQueueProvider = uploadQueueProvider;
  }

  public static MembersInjector<NSClientService> create(
      Provider<HasAndroidInjector> injectorProvider, Provider<AAPSLogger> aapsLoggerProvider,
      Provider<NSSettingsStatus> nsSettingsStatusProvider,
      Provider<NSDeviceStatus> nsDeviceStatusProvider,
      Provider<DatabaseHelperInterface> databaseHelperProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<NSClientPlugin> nsClientPluginProvider, Provider<BuildHelper> buildHelperProvider,
      Provider<Config> configProvider, Provider<DateUtil> dateUtilProvider,
      Provider<UploadQueue> uploadQueueProvider) {
    return new NSClientService_MembersInjector(injectorProvider, aapsLoggerProvider, nsSettingsStatusProvider, nsDeviceStatusProvider, databaseHelperProvider, rxBusProvider, resourceHelperProvider, spProvider, fabricPrivacyProvider, nsClientPluginProvider, buildHelperProvider, configProvider, dateUtilProvider, uploadQueueProvider);
  }

  @Override
  public void injectMembers(NSClientService instance) {
    injectInjector(instance, injectorProvider.get());
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectNsSettingsStatus(instance, nsSettingsStatusProvider.get());
    injectNsDeviceStatus(instance, nsDeviceStatusProvider.get());
    injectDatabaseHelper(instance, databaseHelperProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectSp(instance, spProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectNsClientPlugin(instance, nsClientPluginProvider.get());
    injectBuildHelper(instance, buildHelperProvider.get());
    injectConfig(instance, configProvider.get());
    injectDateUtil(instance, dateUtilProvider.get());
    injectUploadQueue(instance, uploadQueueProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.injector")
  public static void injectInjector(NSClientService instance, HasAndroidInjector injector) {
    instance.injector = injector;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.aapsLogger")
  public static void injectAapsLogger(NSClientService instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.nsSettingsStatus")
  public static void injectNsSettingsStatus(NSClientService instance,
      NSSettingsStatus nsSettingsStatus) {
    instance.nsSettingsStatus = nsSettingsStatus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.nsDeviceStatus")
  public static void injectNsDeviceStatus(NSClientService instance, NSDeviceStatus nsDeviceStatus) {
    instance.nsDeviceStatus = nsDeviceStatus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.databaseHelper")
  public static void injectDatabaseHelper(NSClientService instance,
      DatabaseHelperInterface databaseHelper) {
    instance.databaseHelper = databaseHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.rxBus")
  public static void injectRxBus(NSClientService instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.resourceHelper")
  public static void injectResourceHelper(NSClientService instance, ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.sp")
  public static void injectSp(NSClientService instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.fabricPrivacy")
  public static void injectFabricPrivacy(NSClientService instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.nsClientPlugin")
  public static void injectNsClientPlugin(NSClientService instance, NSClientPlugin nsClientPlugin) {
    instance.nsClientPlugin = nsClientPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.buildHelper")
  public static void injectBuildHelper(NSClientService instance, BuildHelper buildHelper) {
    instance.buildHelper = buildHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.config")
  public static void injectConfig(NSClientService instance, Config config) {
    instance.config = config;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.dateUtil")
  public static void injectDateUtil(NSClientService instance, DateUtil dateUtil) {
    instance.dateUtil = dateUtil;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService.uploadQueue")
  public static void injectUploadQueue(NSClientService instance, UploadQueue uploadQueue) {
    instance.uploadQueue = uploadQueue;
  }
}
