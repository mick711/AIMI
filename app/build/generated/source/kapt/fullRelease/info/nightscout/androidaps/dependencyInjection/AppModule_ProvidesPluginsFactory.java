// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.dependencyInjection;

import dagger.Lazy;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import info.nightscout.androidaps.interfaces.ConfigInterface;
import info.nightscout.androidaps.interfaces.PluginBase;
import java.util.List;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidesPluginsFactory implements Factory<List<PluginBase>> {
  private final AppModule module;

  private final Provider<ConfigInterface> configInterfaceProvider;

  private final Provider<Map<Integer, PluginBase>> allConfigsProvider;

  private final Provider<Map<Integer, PluginBase>> pumpDriversProvider;

  private final Provider<Map<Integer, PluginBase>> notNsClientProvider;

  private final Provider<Map<Integer, PluginBase>> apsProvider;

  public AppModule_ProvidesPluginsFactory(AppModule module,
      Provider<ConfigInterface> configInterfaceProvider,
      Provider<Map<Integer, PluginBase>> allConfigsProvider,
      Provider<Map<Integer, PluginBase>> pumpDriversProvider,
      Provider<Map<Integer, PluginBase>> notNsClientProvider,
      Provider<Map<Integer, PluginBase>> apsProvider) {
    this.module = module;
    this.configInterfaceProvider = configInterfaceProvider;
    this.allConfigsProvider = allConfigsProvider;
    this.pumpDriversProvider = pumpDriversProvider;
    this.notNsClientProvider = notNsClientProvider;
    this.apsProvider = apsProvider;
  }

  @Override
  public List<PluginBase> get() {
    return providesPlugins(module, configInterfaceProvider.get(), allConfigsProvider.get(), DoubleCheck.lazy(pumpDriversProvider), DoubleCheck.lazy(notNsClientProvider), DoubleCheck.lazy(apsProvider));
  }

  public static AppModule_ProvidesPluginsFactory create(AppModule module,
      Provider<ConfigInterface> configInterfaceProvider,
      Provider<Map<Integer, PluginBase>> allConfigsProvider,
      Provider<Map<Integer, PluginBase>> pumpDriversProvider,
      Provider<Map<Integer, PluginBase>> notNsClientProvider,
      Provider<Map<Integer, PluginBase>> apsProvider) {
    return new AppModule_ProvidesPluginsFactory(module, configInterfaceProvider, allConfigsProvider, pumpDriversProvider, notNsClientProvider, apsProvider);
  }

  public static List<PluginBase> providesPlugins(AppModule instance,
      ConfigInterface configInterface, Map<Integer, PluginBase> allConfigs,
      Lazy<Map<Integer, PluginBase>> pumpDrivers, Lazy<Map<Integer, PluginBase>> notNsClient,
      Lazy<Map<Integer, PluginBase>> aps) {
    return Preconditions.checkNotNullFromProvides(instance.providesPlugins(configInterface, allConfigs, pumpDrivers, notNsClient, aps));
  }
}
