// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.constraints.objectives.objectives;

import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesPlugin;
import info.nightscout.androidaps.plugins.general.nsclient.NSClientPlugin;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Objective3_MembersInjector implements MembersInjector<Objective3> {
  private final Provider<SP> spProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider2;

  private final Provider<ObjectivesPlugin> objectivesPluginProvider;

  private final Provider<ResourceHelper> resourceHelperProvider2;

  private final Provider<NSClientPlugin> nsClientPluginProvider;

  public Objective3_MembersInjector(Provider<SP> spProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider2,
      Provider<ObjectivesPlugin> objectivesPluginProvider,
      Provider<ResourceHelper> resourceHelperProvider2,
      Provider<NSClientPlugin> nsClientPluginProvider) {
    this.spProvider = spProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider2 = spProvider2;
    this.objectivesPluginProvider = objectivesPluginProvider;
    this.resourceHelperProvider2 = resourceHelperProvider2;
    this.nsClientPluginProvider = nsClientPluginProvider;
  }

  public static MembersInjector<Objective3> create(Provider<SP> spProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<SP> spProvider2,
      Provider<ObjectivesPlugin> objectivesPluginProvider,
      Provider<ResourceHelper> resourceHelperProvider2,
      Provider<NSClientPlugin> nsClientPluginProvider) {
    return new Objective3_MembersInjector(spProvider, resourceHelperProvider, spProvider2, objectivesPluginProvider, resourceHelperProvider2, nsClientPluginProvider);
  }

  @Override
  public void injectMembers(Objective3 instance) {
    Objective_MembersInjector.injectSp(instance, spProvider.get());
    Objective_MembersInjector.injectResourceHelper(instance, resourceHelperProvider.get());
    injectSp(instance, spProvider2.get());
    injectObjectivesPlugin(instance, objectivesPluginProvider.get());
    injectResourceHelper(instance, resourceHelperProvider2.get());
    injectNsClientPlugin(instance, nsClientPluginProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.objectives.Objective3.sp")
  public static void injectSp(Objective3 instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.objectives.Objective3.objectivesPlugin")
  public static void injectObjectivesPlugin(Objective3 instance,
      ObjectivesPlugin objectivesPlugin) {
    instance.objectivesPlugin = objectivesPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.objectives.Objective3.resourceHelper")
  public static void injectResourceHelper(Objective3 instance, ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.objectives.Objective3.nsClientPlugin")
  public static void injectNsClientPlugin(Objective3 instance, NSClientPlugin nsClientPlugin) {
    instance.nsClientPlugin = nsClientPlugin;
  }
}
