// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.utils.wizard;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.iob.iobCobCalculator.IobCobCalculatorPlugin;
import info.nightscout.androidaps.plugins.treatments.TreatmentsPlugin;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class QuickWizardEntry_Factory implements Factory<QuickWizardEntry> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<SP> spProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<TreatmentsPlugin> treatmentsPluginProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider;

  public QuickWizardEntry_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.spProvider = spProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.treatmentsPluginProvider = treatmentsPluginProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.iobCobCalculatorPluginProvider = iobCobCalculatorPluginProvider;
  }

  @Override
  public QuickWizardEntry get() {
    QuickWizardEntry instance = newInstance(injectorProvider.get());
    QuickWizardEntry_MembersInjector.injectAapsLogger(instance, aapsLoggerProvider.get());
    QuickWizardEntry_MembersInjector.injectSp(instance, spProvider.get());
    QuickWizardEntry_MembersInjector.injectProfileFunction(instance, profileFunctionProvider.get());
    QuickWizardEntry_MembersInjector.injectTreatmentsPlugin(instance, treatmentsPluginProvider.get());
    QuickWizardEntry_MembersInjector.injectLoopPlugin(instance, loopPluginProvider.get());
    QuickWizardEntry_MembersInjector.injectIobCobCalculatorPlugin(instance, iobCobCalculatorPluginProvider.get());
    return instance;
  }

  public static QuickWizardEntry_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<SP> spProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider) {
    return new QuickWizardEntry_Factory(injectorProvider, aapsLoggerProvider, spProvider, profileFunctionProvider, treatmentsPluginProvider, loopPluginProvider, iobCobCalculatorPluginProvider);
  }

  public static QuickWizardEntry newInstance(HasAndroidInjector injector) {
    return new QuickWizardEntry(injector);
  }
}
