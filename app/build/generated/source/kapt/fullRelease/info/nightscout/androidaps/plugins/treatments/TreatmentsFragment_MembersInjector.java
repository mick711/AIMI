// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.treatments;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TreatmentsFragment_MembersInjector implements MembersInjector<TreatmentsFragment> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<TreatmentsPlugin> treatmentsPluginProvider;

  public TreatmentsFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.activePluginProvider = activePluginProvider;
    this.treatmentsPluginProvider = treatmentsPluginProvider;
  }

  public static MembersInjector<TreatmentsFragment> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider) {
    return new TreatmentsFragment_MembersInjector(androidInjectorProvider, rxBusProvider, resourceHelperProvider, fabricPrivacyProvider, activePluginProvider, treatmentsPluginProvider);
  }

  @Override
  public void injectMembers(TreatmentsFragment instance) {
    DaggerFragment_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectActivePlugin(instance, activePluginProvider.get());
    injectTreatmentsPlugin(instance, treatmentsPluginProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentsFragment.rxBus")
  public static void injectRxBus(TreatmentsFragment instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentsFragment.resourceHelper")
  public static void injectResourceHelper(TreatmentsFragment instance,
      ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentsFragment.fabricPrivacy")
  public static void injectFabricPrivacy(TreatmentsFragment instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentsFragment.activePlugin")
  public static void injectActivePlugin(TreatmentsFragment instance,
      ActivePluginProvider activePlugin) {
    instance.activePlugin = activePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.treatments.TreatmentsFragment.treatmentsPlugin")
  public static void injectTreatmentsPlugin(TreatmentsFragment instance,
      TreatmentsPlugin treatmentsPlugin) {
    instance.treatmentsPlugin = treatmentsPlugin;
  }
}
