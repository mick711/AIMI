// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.source;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.MainApp;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.general.nsclient.NSUpload;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DexcomPlugin_Factory implements Factory<DexcomPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<SP> spProvider;

  private final Provider<MainApp> mainAppProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<NSUpload> nsUploadProvider;

  private final Provider<Config> configProvider;

  public DexcomPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<SP> spProvider, Provider<MainApp> mainAppProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<AAPSLogger> aapsLoggerProvider,
      Provider<NSUpload> nsUploadProvider, Provider<Config> configProvider) {
    this.injectorProvider = injectorProvider;
    this.spProvider = spProvider;
    this.mainAppProvider = mainAppProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.nsUploadProvider = nsUploadProvider;
    this.configProvider = configProvider;
  }

  @Override
  public DexcomPlugin get() {
    return newInstance(injectorProvider.get(), spProvider.get(), mainAppProvider.get(), resourceHelperProvider.get(), aapsLoggerProvider.get(), nsUploadProvider.get(), configProvider.get());
  }

  public static DexcomPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<SP> spProvider, Provider<MainApp> mainAppProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<AAPSLogger> aapsLoggerProvider,
      Provider<NSUpload> nsUploadProvider, Provider<Config> configProvider) {
    return new DexcomPlugin_Factory(injectorProvider, spProvider, mainAppProvider, resourceHelperProvider, aapsLoggerProvider, nsUploadProvider, configProvider);
  }

  public static DexcomPlugin newInstance(HasAndroidInjector injector, SP sp, MainApp mainApp,
      ResourceHelper resourceHelper, AAPSLogger aapsLogger, NSUpload nsUpload, Config config) {
    return new DexcomPlugin(injector, sp, mainApp, resourceHelper, aapsLogger, nsUpload, config);
  }
}
