// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.dataBroadcaster;

import android.content.Context;
import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.DatabaseHelperInterface;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.general.nsclient.data.NSDeviceStatus;
import info.nightscout.androidaps.plugins.iob.iobCobCalculator.IobCobCalculatorPlugin;
import info.nightscout.androidaps.receivers.ReceiverStatusStore;
import info.nightscout.androidaps.utils.DefaultValueHelper;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataBroadcastPlugin_Factory implements Factory<DataBroadcastPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<Context> contextProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<DefaultValueHelper> defaultValueHelperProvider;

  private final Provider<NSDeviceStatus> nsDeviceStatusProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<ReceiverStatusStore> receiverStatusStoreProvider;

  private final Provider<Config> configProvider;

  private final Provider<DatabaseHelperInterface> databaseHelperProvider;

  public DataBroadcastPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<Context> contextProvider, Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<RxBusWrapper> rxBusProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<DefaultValueHelper> defaultValueHelperProvider,
      Provider<NSDeviceStatus> nsDeviceStatusProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<ReceiverStatusStore> receiverStatusStoreProvider, Provider<Config> configProvider,
      Provider<DatabaseHelperInterface> databaseHelperProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.contextProvider = contextProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.rxBusProvider = rxBusProvider;
    this.iobCobCalculatorPluginProvider = iobCobCalculatorPluginProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.defaultValueHelperProvider = defaultValueHelperProvider;
    this.nsDeviceStatusProvider = nsDeviceStatusProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.activePluginProvider = activePluginProvider;
    this.receiverStatusStoreProvider = receiverStatusStoreProvider;
    this.configProvider = configProvider;
    this.databaseHelperProvider = databaseHelperProvider;
  }

  @Override
  public DataBroadcastPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), resourceHelperProvider.get(), contextProvider.get(), fabricPrivacyProvider.get(), rxBusProvider.get(), iobCobCalculatorPluginProvider.get(), profileFunctionProvider.get(), defaultValueHelperProvider.get(), nsDeviceStatusProvider.get(), loopPluginProvider.get(), activePluginProvider.get(), receiverStatusStoreProvider.get(), configProvider.get(), databaseHelperProvider.get());
  }

  public static DataBroadcastPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<Context> contextProvider, Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<RxBusWrapper> rxBusProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<DefaultValueHelper> defaultValueHelperProvider,
      Provider<NSDeviceStatus> nsDeviceStatusProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<ReceiverStatusStore> receiverStatusStoreProvider, Provider<Config> configProvider,
      Provider<DatabaseHelperInterface> databaseHelperProvider) {
    return new DataBroadcastPlugin_Factory(injectorProvider, aapsLoggerProvider, resourceHelperProvider, contextProvider, fabricPrivacyProvider, rxBusProvider, iobCobCalculatorPluginProvider, profileFunctionProvider, defaultValueHelperProvider, nsDeviceStatusProvider, loopPluginProvider, activePluginProvider, receiverStatusStoreProvider, configProvider, databaseHelperProvider);
  }

  public static DataBroadcastPlugin newInstance(HasAndroidInjector injector, AAPSLogger aapsLogger,
      ResourceHelper resourceHelper, Context context, FabricPrivacy fabricPrivacy,
      RxBusWrapper rxBus, IobCobCalculatorPlugin iobCobCalculatorPlugin,
      ProfileFunction profileFunction, DefaultValueHelper defaultValueHelper,
      NSDeviceStatus nsDeviceStatus, LoopPlugin loopPlugin, ActivePluginProvider activePlugin,
      ReceiverStatusStore receiverStatusStore, Config config,
      DatabaseHelperInterface databaseHelper) {
    return new DataBroadcastPlugin(injector, aapsLogger, resourceHelper, context, fabricPrivacy, rxBus, iobCobCalculatorPlugin, profileFunction, defaultValueHelper, nsDeviceStatus, loopPlugin, activePlugin, receiverStatusStore, config, databaseHelper);
  }
}
