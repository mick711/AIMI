// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.configBuilder;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ConfigBuilderPlugin_Factory implements Factory<ConfigBuilderPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  public ConfigBuilderPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ActivePluginProvider> activePluginProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.rxBusProvider = rxBusProvider;
    this.activePluginProvider = activePluginProvider;
  }

  @Override
  public ConfigBuilderPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), resourceHelperProvider.get(), spProvider.get(), rxBusProvider.get(), activePluginProvider.get());
  }

  public static ConfigBuilderPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ActivePluginProvider> activePluginProvider) {
    return new ConfigBuilderPlugin_Factory(injectorProvider, aapsLoggerProvider, resourceHelperProvider, spProvider, rxBusProvider, activePluginProvider);
  }

  public static ConfigBuilderPlugin newInstance(HasAndroidInjector injector, AAPSLogger aapsLogger,
      ResourceHelper resourceHelper, SP sp, RxBusWrapper rxBus, ActivePluginProvider activePlugin) {
    return new ConfigBuilderPlugin(injector, aapsLogger, resourceHelper, sp, rxBus, activePlugin);
  }
}
