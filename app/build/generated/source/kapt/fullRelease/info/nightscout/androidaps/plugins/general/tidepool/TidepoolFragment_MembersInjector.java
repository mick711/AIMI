// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.tidepool;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.general.tidepool.comm.TidepoolUploader;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TidepoolFragment_MembersInjector implements MembersInjector<TidepoolFragment> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<TidepoolPlugin> tidepoolPluginProvider;

  private final Provider<TidepoolUploader> tidepoolUploaderProvider;

  private final Provider<SP> spProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  public TidepoolFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<TidepoolPlugin> tidepoolPluginProvider,
      Provider<TidepoolUploader> tidepoolUploaderProvider, Provider<SP> spProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.rxBusProvider = rxBusProvider;
    this.tidepoolPluginProvider = tidepoolPluginProvider;
    this.tidepoolUploaderProvider = tidepoolUploaderProvider;
    this.spProvider = spProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
  }

  public static MembersInjector<TidepoolFragment> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<TidepoolPlugin> tidepoolPluginProvider,
      Provider<TidepoolUploader> tidepoolUploaderProvider, Provider<SP> spProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider) {
    return new TidepoolFragment_MembersInjector(androidInjectorProvider, rxBusProvider, tidepoolPluginProvider, tidepoolUploaderProvider, spProvider, fabricPrivacyProvider);
  }

  @Override
  public void injectMembers(TidepoolFragment instance) {
    DaggerFragment_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectTidepoolPlugin(instance, tidepoolPluginProvider.get());
    injectTidepoolUploader(instance, tidepoolUploaderProvider.get());
    injectSp(instance, spProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.tidepool.TidepoolFragment.rxBus")
  public static void injectRxBus(TidepoolFragment instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.tidepool.TidepoolFragment.tidepoolPlugin")
  public static void injectTidepoolPlugin(TidepoolFragment instance,
      TidepoolPlugin tidepoolPlugin) {
    instance.tidepoolPlugin = tidepoolPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.tidepool.TidepoolFragment.tidepoolUploader")
  public static void injectTidepoolUploader(TidepoolFragment instance,
      TidepoolUploader tidepoolUploader) {
    instance.tidepoolUploader = tidepoolUploader;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.tidepool.TidepoolFragment.sp")
  public static void injectSp(TidepoolFragment instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.tidepool.TidepoolFragment.fabricPrivacy")
  public static void injectFabricPrivacy(TidepoolFragment instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }
}
