// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.automation;

import android.content.Context;
import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.configBuilder.ConstraintChecker;
import info.nightscout.androidaps.services.LocationServiceHelper;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AutomationPlugin_Factory implements Factory<AutomationPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<Context> contextProvider;

  private final Provider<SP> spProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ConstraintChecker> constraintCheckerProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<Config> configProvider;

  private final Provider<LocationServiceHelper> locationServiceHelperProvider;

  private final Provider<DateUtil> dateUtilProvider;

  public AutomationPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<Context> contextProvider,
      Provider<SP> spProvider, Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<LoopPlugin> loopPluginProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<Config> configProvider,
      Provider<LocationServiceHelper> locationServiceHelperProvider,
      Provider<DateUtil> dateUtilProvider) {
    this.injectorProvider = injectorProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.contextProvider = contextProvider;
    this.spProvider = spProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.rxBusProvider = rxBusProvider;
    this.constraintCheckerProvider = constraintCheckerProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.configProvider = configProvider;
    this.locationServiceHelperProvider = locationServiceHelperProvider;
    this.dateUtilProvider = dateUtilProvider;
  }

  @Override
  public AutomationPlugin get() {
    return newInstance(injectorProvider.get(), resourceHelperProvider.get(), contextProvider.get(), spProvider.get(), fabricPrivacyProvider.get(), loopPluginProvider.get(), rxBusProvider.get(), constraintCheckerProvider.get(), aapsLoggerProvider.get(), configProvider.get(), locationServiceHelperProvider.get(), dateUtilProvider.get());
  }

  public static AutomationPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<Context> contextProvider,
      Provider<SP> spProvider, Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<LoopPlugin> loopPluginProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<Config> configProvider,
      Provider<LocationServiceHelper> locationServiceHelperProvider,
      Provider<DateUtil> dateUtilProvider) {
    return new AutomationPlugin_Factory(injectorProvider, resourceHelperProvider, contextProvider, spProvider, fabricPrivacyProvider, loopPluginProvider, rxBusProvider, constraintCheckerProvider, aapsLoggerProvider, configProvider, locationServiceHelperProvider, dateUtilProvider);
  }

  public static AutomationPlugin newInstance(HasAndroidInjector injector,
      ResourceHelper resourceHelper, Context context, SP sp, FabricPrivacy fabricPrivacy,
      LoopPlugin loopPlugin, RxBusWrapper rxBus, ConstraintChecker constraintChecker,
      AAPSLogger aapsLogger, Config config, LocationServiceHelper locationServiceHelper,
      DateUtil dateUtil) {
    return new AutomationPlugin(injector, resourceHelper, context, sp, fabricPrivacy, loopPlugin, rxBus, constraintChecker, aapsLogger, config, locationServiceHelper, dateUtil);
  }
}
