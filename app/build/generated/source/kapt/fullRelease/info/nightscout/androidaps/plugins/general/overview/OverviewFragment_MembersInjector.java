// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.overview;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.HasAndroidInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.DatabaseHelperInterface;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.configBuilder.ConfigBuilderPlugin;
import info.nightscout.androidaps.plugins.configBuilder.ConstraintChecker;
import info.nightscout.androidaps.plugins.general.nsclient.data.NSDeviceStatus;
import info.nightscout.androidaps.plugins.general.overview.notifications.NotificationStore;
import info.nightscout.androidaps.plugins.general.wear.ActionStringHandler;
import info.nightscout.androidaps.plugins.iob.iobCobCalculator.IobCobCalculatorPlugin;
import info.nightscout.androidaps.plugins.source.DexcomPlugin;
import info.nightscout.androidaps.plugins.source.XdripPlugin;
import info.nightscout.androidaps.plugins.treatments.TreatmentsPlugin;
import info.nightscout.androidaps.queue.CommandQueue;
import info.nightscout.androidaps.skins.SkinProvider;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.DefaultValueHelper;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.buildHelper.BuildHelper;
import info.nightscout.androidaps.utils.protection.ProtectionCheck;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import info.nightscout.androidaps.utils.wizard.QuickWizard;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OverviewFragment_MembersInjector implements MembersInjector<OverviewFragment> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<SP> spProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<DefaultValueHelper> defaultValueHelperProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<ConstraintChecker> constraintCheckerProvider;

  private final Provider<StatusLightHandler> statusLightHandlerProvider;

  private final Provider<NSDeviceStatus> nsDeviceStatusProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<ConfigBuilderPlugin> configBuilderPluginProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<TreatmentsPlugin> treatmentsPluginProvider;

  private final Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider;

  private final Provider<DexcomPlugin> dexcomPluginProvider;

  private final Provider<XdripPlugin> xdripPluginProvider;

  private final Provider<NotificationStore> notificationStoreProvider;

  private final Provider<ActionStringHandler> actionStringHandlerProvider;

  private final Provider<QuickWizard> quickWizardProvider;

  private final Provider<BuildHelper> buildHelperProvider;

  private final Provider<CommandQueue> commandQueueProvider;

  private final Provider<ProtectionCheck> protectionCheckProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<OverviewMenus> overviewMenusProvider;

  private final Provider<SkinProvider> skinProvider;

  private final Provider<Config> configProvider;

  private final Provider<DateUtil> dateUtilProvider;

  private final Provider<DatabaseHelperInterface> databaseHelperProvider;

  public OverviewFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<HasAndroidInjector> injectorProvider, Provider<AAPSLogger> aapsLoggerProvider,
      Provider<SP> spProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<DefaultValueHelper> defaultValueHelperProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<StatusLightHandler> statusLightHandlerProvider,
      Provider<NSDeviceStatus> nsDeviceStatusProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<ConfigBuilderPlugin> configBuilderPluginProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<DexcomPlugin> dexcomPluginProvider, Provider<XdripPlugin> xdripPluginProvider,
      Provider<NotificationStore> notificationStoreProvider,
      Provider<ActionStringHandler> actionStringHandlerProvider,
      Provider<QuickWizard> quickWizardProvider, Provider<BuildHelper> buildHelperProvider,
      Provider<CommandQueue> commandQueueProvider,
      Provider<ProtectionCheck> protectionCheckProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<OverviewMenus> overviewMenusProvider,
      Provider<SkinProvider> skinProvider, Provider<Config> configProvider,
      Provider<DateUtil> dateUtilProvider,
      Provider<DatabaseHelperInterface> databaseHelperProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.spProvider = spProvider;
    this.rxBusProvider = rxBusProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.defaultValueHelperProvider = defaultValueHelperProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.constraintCheckerProvider = constraintCheckerProvider;
    this.statusLightHandlerProvider = statusLightHandlerProvider;
    this.nsDeviceStatusProvider = nsDeviceStatusProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.configBuilderPluginProvider = configBuilderPluginProvider;
    this.activePluginProvider = activePluginProvider;
    this.treatmentsPluginProvider = treatmentsPluginProvider;
    this.iobCobCalculatorPluginProvider = iobCobCalculatorPluginProvider;
    this.dexcomPluginProvider = dexcomPluginProvider;
    this.xdripPluginProvider = xdripPluginProvider;
    this.notificationStoreProvider = notificationStoreProvider;
    this.actionStringHandlerProvider = actionStringHandlerProvider;
    this.quickWizardProvider = quickWizardProvider;
    this.buildHelperProvider = buildHelperProvider;
    this.commandQueueProvider = commandQueueProvider;
    this.protectionCheckProvider = protectionCheckProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.overviewMenusProvider = overviewMenusProvider;
    this.skinProvider = skinProvider;
    this.configProvider = configProvider;
    this.dateUtilProvider = dateUtilProvider;
    this.databaseHelperProvider = databaseHelperProvider;
  }

  public static MembersInjector<OverviewFragment> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<HasAndroidInjector> injectorProvider, Provider<AAPSLogger> aapsLoggerProvider,
      Provider<SP> spProvider, Provider<RxBusWrapper> rxBusProvider,
      Provider<ResourceHelper> resourceHelperProvider,
      Provider<DefaultValueHelper> defaultValueHelperProvider,
      Provider<ProfileFunction> profileFunctionProvider,
      Provider<ConstraintChecker> constraintCheckerProvider,
      Provider<StatusLightHandler> statusLightHandlerProvider,
      Provider<NSDeviceStatus> nsDeviceStatusProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<ConfigBuilderPlugin> configBuilderPluginProvider,
      Provider<ActivePluginProvider> activePluginProvider,
      Provider<TreatmentsPlugin> treatmentsPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<DexcomPlugin> dexcomPluginProvider, Provider<XdripPlugin> xdripPluginProvider,
      Provider<NotificationStore> notificationStoreProvider,
      Provider<ActionStringHandler> actionStringHandlerProvider,
      Provider<QuickWizard> quickWizardProvider, Provider<BuildHelper> buildHelperProvider,
      Provider<CommandQueue> commandQueueProvider,
      Provider<ProtectionCheck> protectionCheckProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider, Provider<OverviewMenus> overviewMenusProvider,
      Provider<SkinProvider> skinProvider, Provider<Config> configProvider,
      Provider<DateUtil> dateUtilProvider,
      Provider<DatabaseHelperInterface> databaseHelperProvider) {
    return new OverviewFragment_MembersInjector(androidInjectorProvider, injectorProvider, aapsLoggerProvider, spProvider, rxBusProvider, resourceHelperProvider, defaultValueHelperProvider, profileFunctionProvider, constraintCheckerProvider, statusLightHandlerProvider, nsDeviceStatusProvider, loopPluginProvider, configBuilderPluginProvider, activePluginProvider, treatmentsPluginProvider, iobCobCalculatorPluginProvider, dexcomPluginProvider, xdripPluginProvider, notificationStoreProvider, actionStringHandlerProvider, quickWizardProvider, buildHelperProvider, commandQueueProvider, protectionCheckProvider, fabricPrivacyProvider, overviewMenusProvider, skinProvider, configProvider, dateUtilProvider, databaseHelperProvider);
  }

  @Override
  public void injectMembers(OverviewFragment instance) {
    DaggerFragment_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectInjector(instance, injectorProvider.get());
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectSp(instance, spProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectDefaultValueHelper(instance, defaultValueHelperProvider.get());
    injectProfileFunction(instance, profileFunctionProvider.get());
    injectConstraintChecker(instance, constraintCheckerProvider.get());
    injectStatusLightHandler(instance, statusLightHandlerProvider.get());
    injectNsDeviceStatus(instance, nsDeviceStatusProvider.get());
    injectLoopPlugin(instance, loopPluginProvider.get());
    injectConfigBuilderPlugin(instance, configBuilderPluginProvider.get());
    injectActivePlugin(instance, activePluginProvider.get());
    injectTreatmentsPlugin(instance, treatmentsPluginProvider.get());
    injectIobCobCalculatorPlugin(instance, iobCobCalculatorPluginProvider.get());
    injectDexcomPlugin(instance, dexcomPluginProvider.get());
    injectXdripPlugin(instance, xdripPluginProvider.get());
    injectNotificationStore(instance, notificationStoreProvider.get());
    injectActionStringHandler(instance, actionStringHandlerProvider.get());
    injectQuickWizard(instance, quickWizardProvider.get());
    injectBuildHelper(instance, buildHelperProvider.get());
    injectCommandQueue(instance, commandQueueProvider.get());
    injectProtectionCheck(instance, protectionCheckProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectOverviewMenus(instance, overviewMenusProvider.get());
    injectSkinProvider(instance, skinProvider.get());
    injectConfig(instance, configProvider.get());
    injectDateUtil(instance, dateUtilProvider.get());
    injectDatabaseHelper(instance, databaseHelperProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.injector")
  public static void injectInjector(OverviewFragment instance, HasAndroidInjector injector) {
    instance.injector = injector;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.aapsLogger")
  public static void injectAapsLogger(OverviewFragment instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.sp")
  public static void injectSp(OverviewFragment instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.rxBus")
  public static void injectRxBus(OverviewFragment instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.resourceHelper")
  public static void injectResourceHelper(OverviewFragment instance,
      ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.defaultValueHelper")
  public static void injectDefaultValueHelper(OverviewFragment instance,
      DefaultValueHelper defaultValueHelper) {
    instance.defaultValueHelper = defaultValueHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.profileFunction")
  public static void injectProfileFunction(OverviewFragment instance,
      ProfileFunction profileFunction) {
    instance.profileFunction = profileFunction;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.constraintChecker")
  public static void injectConstraintChecker(OverviewFragment instance,
      ConstraintChecker constraintChecker) {
    instance.constraintChecker = constraintChecker;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.statusLightHandler")
  public static void injectStatusLightHandler(OverviewFragment instance,
      StatusLightHandler statusLightHandler) {
    instance.statusLightHandler = statusLightHandler;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.nsDeviceStatus")
  public static void injectNsDeviceStatus(OverviewFragment instance,
      NSDeviceStatus nsDeviceStatus) {
    instance.nsDeviceStatus = nsDeviceStatus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.loopPlugin")
  public static void injectLoopPlugin(OverviewFragment instance, LoopPlugin loopPlugin) {
    instance.loopPlugin = loopPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.configBuilderPlugin")
  public static void injectConfigBuilderPlugin(OverviewFragment instance,
      ConfigBuilderPlugin configBuilderPlugin) {
    instance.configBuilderPlugin = configBuilderPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.activePlugin")
  public static void injectActivePlugin(OverviewFragment instance,
      ActivePluginProvider activePlugin) {
    instance.activePlugin = activePlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.treatmentsPlugin")
  public static void injectTreatmentsPlugin(OverviewFragment instance,
      TreatmentsPlugin treatmentsPlugin) {
    instance.treatmentsPlugin = treatmentsPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.iobCobCalculatorPlugin")
  public static void injectIobCobCalculatorPlugin(OverviewFragment instance,
      IobCobCalculatorPlugin iobCobCalculatorPlugin) {
    instance.iobCobCalculatorPlugin = iobCobCalculatorPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.dexcomPlugin")
  public static void injectDexcomPlugin(OverviewFragment instance, DexcomPlugin dexcomPlugin) {
    instance.dexcomPlugin = dexcomPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.xdripPlugin")
  public static void injectXdripPlugin(OverviewFragment instance, XdripPlugin xdripPlugin) {
    instance.xdripPlugin = xdripPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.notificationStore")
  public static void injectNotificationStore(OverviewFragment instance,
      NotificationStore notificationStore) {
    instance.notificationStore = notificationStore;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.actionStringHandler")
  public static void injectActionStringHandler(OverviewFragment instance,
      ActionStringHandler actionStringHandler) {
    instance.actionStringHandler = actionStringHandler;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.quickWizard")
  public static void injectQuickWizard(OverviewFragment instance, QuickWizard quickWizard) {
    instance.quickWizard = quickWizard;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.buildHelper")
  public static void injectBuildHelper(OverviewFragment instance, BuildHelper buildHelper) {
    instance.buildHelper = buildHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.commandQueue")
  public static void injectCommandQueue(OverviewFragment instance, CommandQueue commandQueue) {
    instance.commandQueue = commandQueue;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.protectionCheck")
  public static void injectProtectionCheck(OverviewFragment instance,
      ProtectionCheck protectionCheck) {
    instance.protectionCheck = protectionCheck;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.fabricPrivacy")
  public static void injectFabricPrivacy(OverviewFragment instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.overviewMenus")
  public static void injectOverviewMenus(OverviewFragment instance, OverviewMenus overviewMenus) {
    instance.overviewMenus = overviewMenus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.skinProvider")
  public static void injectSkinProvider(OverviewFragment instance, SkinProvider skinProvider) {
    instance.skinProvider = skinProvider;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.config")
  public static void injectConfig(OverviewFragment instance, Config config) {
    instance.config = config;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.dateUtil")
  public static void injectDateUtil(OverviewFragment instance, DateUtil dateUtil) {
    instance.dateUtil = dateUtil;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.general.overview.OverviewFragment.databaseHelper")
  public static void injectDatabaseHelper(OverviewFragment instance,
      DatabaseHelperInterface databaseHelper) {
    instance.databaseHelper = databaseHelper;
  }
}
