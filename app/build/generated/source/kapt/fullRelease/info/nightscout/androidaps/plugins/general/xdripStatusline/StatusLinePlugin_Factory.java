// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.xdripStatusline;

import android.content.Context;
import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.interfaces.ProfileFunction;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.aps.loop.LoopPlugin;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.iob.iobCobCalculator.IobCobCalculatorPlugin;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class StatusLinePlugin_Factory implements Factory<StatusLinePlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<SP> spProvider;

  private final Provider<ProfileFunction> profileFunctionProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<Context> contextProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  private final Provider<LoopPlugin> loopPluginProvider;

  private final Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  public StatusLinePlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<SP> spProvider, Provider<ProfileFunction> profileFunctionProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<Context> contextProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ActivePluginProvider> activePluginProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<AAPSLogger> aapsLoggerProvider) {
    this.injectorProvider = injectorProvider;
    this.spProvider = spProvider;
    this.profileFunctionProvider = profileFunctionProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.contextProvider = contextProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.activePluginProvider = activePluginProvider;
    this.loopPluginProvider = loopPluginProvider;
    this.iobCobCalculatorPluginProvider = iobCobCalculatorPluginProvider;
    this.rxBusProvider = rxBusProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
  }

  @Override
  public StatusLinePlugin get() {
    return newInstance(injectorProvider.get(), spProvider.get(), profileFunctionProvider.get(), resourceHelperProvider.get(), contextProvider.get(), fabricPrivacyProvider.get(), activePluginProvider.get(), loopPluginProvider.get(), iobCobCalculatorPluginProvider.get(), rxBusProvider.get(), aapsLoggerProvider.get());
  }

  public static StatusLinePlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<SP> spProvider, Provider<ProfileFunction> profileFunctionProvider,
      Provider<ResourceHelper> resourceHelperProvider, Provider<Context> contextProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ActivePluginProvider> activePluginProvider, Provider<LoopPlugin> loopPluginProvider,
      Provider<IobCobCalculatorPlugin> iobCobCalculatorPluginProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<AAPSLogger> aapsLoggerProvider) {
    return new StatusLinePlugin_Factory(injectorProvider, spProvider, profileFunctionProvider, resourceHelperProvider, contextProvider, fabricPrivacyProvider, activePluginProvider, loopPluginProvider, iobCobCalculatorPluginProvider, rxBusProvider, aapsLoggerProvider);
  }

  public static StatusLinePlugin newInstance(HasAndroidInjector injector, SP sp,
      ProfileFunction profileFunction, ResourceHelper resourceHelper, Context context,
      FabricPrivacy fabricPrivacy, ActivePluginProvider activePlugin, LoopPlugin loopPlugin,
      IobCobCalculatorPlugin iobCobCalculatorPlugin, RxBusWrapper rxBus, AAPSLogger aapsLogger) {
    return new StatusLinePlugin(injector, sp, profileFunction, resourceHelper, context, fabricPrivacy, activePlugin, loopPlugin, iobCobCalculatorPlugin, rxBus, aapsLogger);
  }
}
