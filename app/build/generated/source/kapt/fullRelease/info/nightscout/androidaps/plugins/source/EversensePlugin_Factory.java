// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.source;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.general.nsclient.NSUpload;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class EversensePlugin_Factory implements Factory<EversensePlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<SP> spProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<DateUtil> dateUtilProvider;

  private final Provider<NSUpload> nsUploadProvider;

  public EversensePlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<SP> spProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<DateUtil> dateUtilProvider,
      Provider<NSUpload> nsUploadProvider) {
    this.injectorProvider = injectorProvider;
    this.spProvider = spProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.dateUtilProvider = dateUtilProvider;
    this.nsUploadProvider = nsUploadProvider;
  }

  @Override
  public EversensePlugin get() {
    return newInstance(injectorProvider.get(), spProvider.get(), resourceHelperProvider.get(), aapsLoggerProvider.get(), dateUtilProvider.get(), nsUploadProvider.get());
  }

  public static EversensePlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<SP> spProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<DateUtil> dateUtilProvider,
      Provider<NSUpload> nsUploadProvider) {
    return new EversensePlugin_Factory(injectorProvider, spProvider, resourceHelperProvider, aapsLoggerProvider, dateUtilProvider, nsUploadProvider);
  }

  public static EversensePlugin newInstance(HasAndroidInjector injector, SP sp,
      ResourceHelper resourceHelper, AAPSLogger aapsLogger, DateUtil dateUtil, NSUpload nsUpload) {
    return new EversensePlugin(injector, sp, resourceHelper, aapsLogger, dateUtil, nsUpload);
  }
}
