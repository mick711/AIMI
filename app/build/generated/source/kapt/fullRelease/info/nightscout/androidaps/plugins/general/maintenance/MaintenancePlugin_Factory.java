// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.maintenance;

import android.content.Context;
import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.Config;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.general.nsclient.data.NSSettingsStatus;
import info.nightscout.androidaps.utils.buildHelper.BuildHelper;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MaintenancePlugin_Factory implements Factory<MaintenancePlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<Context> contextProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<SP> spProvider;

  private final Provider<NSSettingsStatus> nsSettingsStatusProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<BuildHelper> buildHelperProvider;

  private final Provider<Config> configProvider;

  public MaintenancePlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<Context> contextProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<NSSettingsStatus> nsSettingsStatusProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<BuildHelper> buildHelperProvider,
      Provider<Config> configProvider) {
    this.injectorProvider = injectorProvider;
    this.contextProvider = contextProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.spProvider = spProvider;
    this.nsSettingsStatusProvider = nsSettingsStatusProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.buildHelperProvider = buildHelperProvider;
    this.configProvider = configProvider;
  }

  @Override
  public MaintenancePlugin get() {
    return newInstance(injectorProvider.get(), contextProvider.get(), resourceHelperProvider.get(), spProvider.get(), nsSettingsStatusProvider.get(), aapsLoggerProvider.get(), buildHelperProvider.get(), configProvider.get());
  }

  public static MaintenancePlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<Context> contextProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<SP> spProvider, Provider<NSSettingsStatus> nsSettingsStatusProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<BuildHelper> buildHelperProvider,
      Provider<Config> configProvider) {
    return new MaintenancePlugin_Factory(injectorProvider, contextProvider, resourceHelperProvider, spProvider, nsSettingsStatusProvider, aapsLoggerProvider, buildHelperProvider, configProvider);
  }

  public static MaintenancePlugin newInstance(HasAndroidInjector injector, Context context,
      ResourceHelper resourceHelper, SP sp, NSSettingsStatus nsSettingsStatus,
      AAPSLogger aapsLogger, BuildHelper buildHelper, Config config) {
    return new MaintenancePlugin(injector, context, resourceHelper, sp, nsSettingsStatus, aapsLogger, buildHelper, config);
  }
}
