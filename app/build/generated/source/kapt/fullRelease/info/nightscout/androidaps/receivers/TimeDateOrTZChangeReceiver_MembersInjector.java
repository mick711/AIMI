// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.receivers;

import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.interfaces.ActivePluginProvider;
import info.nightscout.androidaps.logging.AAPSLogger;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TimeDateOrTZChangeReceiver_MembersInjector implements MembersInjector<TimeDateOrTZChangeReceiver> {
  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ActivePluginProvider> activePluginProvider;

  public TimeDateOrTZChangeReceiver_MembersInjector(Provider<AAPSLogger> aapsLoggerProvider,
      Provider<ActivePluginProvider> activePluginProvider) {
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.activePluginProvider = activePluginProvider;
  }

  public static MembersInjector<TimeDateOrTZChangeReceiver> create(
      Provider<AAPSLogger> aapsLoggerProvider,
      Provider<ActivePluginProvider> activePluginProvider) {
    return new TimeDateOrTZChangeReceiver_MembersInjector(aapsLoggerProvider, activePluginProvider);
  }

  @Override
  public void injectMembers(TimeDateOrTZChangeReceiver instance) {
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectActivePlugin(instance, activePluginProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.TimeDateOrTZChangeReceiver.aapsLogger")
  public static void injectAapsLogger(TimeDateOrTZChangeReceiver instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.receivers.TimeDateOrTZChangeReceiver.activePlugin")
  public static void injectActivePlugin(TimeDateOrTZChangeReceiver instance,
      ActivePluginProvider activePlugin) {
    instance.activePlugin = activePlugin;
  }
}
