// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.general.tidepool;

import android.content.Context;
import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.plugins.general.tidepool.comm.TidepoolUploader;
import info.nightscout.androidaps.plugins.general.tidepool.comm.UploadChunk;
import info.nightscout.androidaps.plugins.general.tidepool.utils.RateLimit;
import info.nightscout.androidaps.receivers.ReceiverStatusStore;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TidepoolPlugin_Factory implements Factory<TidepoolPlugin> {
  private final Provider<HasAndroidInjector> injectorProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<Context> contextProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<TidepoolUploader> tidepoolUploaderProvider;

  private final Provider<UploadChunk> uploadChunkProvider;

  private final Provider<SP> spProvider;

  private final Provider<RateLimit> rateLimitProvider;

  private final Provider<ReceiverStatusStore> receiverStatusStoreProvider;

  public TidepoolPlugin_Factory(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<Context> contextProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<TidepoolUploader> tidepoolUploaderProvider,
      Provider<UploadChunk> uploadChunkProvider, Provider<SP> spProvider,
      Provider<RateLimit> rateLimitProvider,
      Provider<ReceiverStatusStore> receiverStatusStoreProvider) {
    this.injectorProvider = injectorProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.rxBusProvider = rxBusProvider;
    this.contextProvider = contextProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.tidepoolUploaderProvider = tidepoolUploaderProvider;
    this.uploadChunkProvider = uploadChunkProvider;
    this.spProvider = spProvider;
    this.rateLimitProvider = rateLimitProvider;
    this.receiverStatusStoreProvider = receiverStatusStoreProvider;
  }

  @Override
  public TidepoolPlugin get() {
    return newInstance(injectorProvider.get(), aapsLoggerProvider.get(), resourceHelperProvider.get(), rxBusProvider.get(), contextProvider.get(), fabricPrivacyProvider.get(), tidepoolUploaderProvider.get(), uploadChunkProvider.get(), spProvider.get(), rateLimitProvider.get(), receiverStatusStoreProvider.get());
  }

  public static TidepoolPlugin_Factory create(Provider<HasAndroidInjector> injectorProvider,
      Provider<AAPSLogger> aapsLoggerProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<Context> contextProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<TidepoolUploader> tidepoolUploaderProvider,
      Provider<UploadChunk> uploadChunkProvider, Provider<SP> spProvider,
      Provider<RateLimit> rateLimitProvider,
      Provider<ReceiverStatusStore> receiverStatusStoreProvider) {
    return new TidepoolPlugin_Factory(injectorProvider, aapsLoggerProvider, resourceHelperProvider, rxBusProvider, contextProvider, fabricPrivacyProvider, tidepoolUploaderProvider, uploadChunkProvider, spProvider, rateLimitProvider, receiverStatusStoreProvider);
  }

  public static TidepoolPlugin newInstance(HasAndroidInjector injector, AAPSLogger aapsLogger,
      ResourceHelper resourceHelper, RxBusWrapper rxBus, Context context,
      FabricPrivacy fabricPrivacy, TidepoolUploader tidepoolUploader, UploadChunk uploadChunk,
      SP sp, RateLimit rateLimit, ReceiverStatusStore receiverStatusStore) {
    return new TidepoolPlugin(injector, aapsLogger, resourceHelper, rxBus, context, fabricPrivacy, tidepoolUploader, uploadChunk, sp, rateLimit, receiverStatusStore);
  }
}
