// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.utils;

import dagger.android.HasAndroidInjector;
import dagger.internal.Factory;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AndroidPermission_Factory implements Factory<AndroidPermission> {
  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<HasAndroidInjector> injectorProvider;

  public AndroidPermission_Factory(Provider<ResourceHelper> resourceHelperProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<HasAndroidInjector> injectorProvider) {
    this.resourceHelperProvider = resourceHelperProvider;
    this.rxBusProvider = rxBusProvider;
    this.injectorProvider = injectorProvider;
  }

  @Override
  public AndroidPermission get() {
    return newInstance(resourceHelperProvider.get(), rxBusProvider.get(), injectorProvider.get());
  }

  public static AndroidPermission_Factory create(Provider<ResourceHelper> resourceHelperProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<HasAndroidInjector> injectorProvider) {
    return new AndroidPermission_Factory(resourceHelperProvider, rxBusProvider, injectorProvider);
  }

  public static AndroidPermission newInstance(ResourceHelper resourceHelper, RxBusWrapper rxBus,
      HasAndroidInjector injector) {
    return new AndroidPermission(resourceHelper, rxBus, injector);
  }
}
