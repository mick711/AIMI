// Generated by Dagger (https://dagger.dev).
package info.nightscout.androidaps.plugins.constraints.objectives;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import info.nightscout.androidaps.logging.AAPSLogger;
import info.nightscout.androidaps.plugins.bus.RxBusWrapper;
import info.nightscout.androidaps.receivers.ReceiverStatusStore;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.FabricPrivacy;
import info.nightscout.androidaps.utils.SntpClient;
import info.nightscout.androidaps.utils.resources.ResourceHelper;
import info.nightscout.androidaps.utils.sharedPreferences.SP;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ObjectivesFragment_MembersInjector implements MembersInjector<ObjectivesFragment> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<RxBusWrapper> rxBusProvider;

  private final Provider<AAPSLogger> aapsLoggerProvider;

  private final Provider<SP> spProvider;

  private final Provider<ResourceHelper> resourceHelperProvider;

  private final Provider<FabricPrivacy> fabricPrivacyProvider;

  private final Provider<ObjectivesPlugin> objectivesPluginProvider;

  private final Provider<ReceiverStatusStore> receiverStatusStoreProvider;

  private final Provider<DateUtil> dateUtilProvider;

  private final Provider<SntpClient> sntpClientProvider;

  public ObjectivesFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<AAPSLogger> aapsLoggerProvider,
      Provider<SP> spProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ObjectivesPlugin> objectivesPluginProvider,
      Provider<ReceiverStatusStore> receiverStatusStoreProvider,
      Provider<DateUtil> dateUtilProvider, Provider<SntpClient> sntpClientProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.rxBusProvider = rxBusProvider;
    this.aapsLoggerProvider = aapsLoggerProvider;
    this.spProvider = spProvider;
    this.resourceHelperProvider = resourceHelperProvider;
    this.fabricPrivacyProvider = fabricPrivacyProvider;
    this.objectivesPluginProvider = objectivesPluginProvider;
    this.receiverStatusStoreProvider = receiverStatusStoreProvider;
    this.dateUtilProvider = dateUtilProvider;
    this.sntpClientProvider = sntpClientProvider;
  }

  public static MembersInjector<ObjectivesFragment> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RxBusWrapper> rxBusProvider, Provider<AAPSLogger> aapsLoggerProvider,
      Provider<SP> spProvider, Provider<ResourceHelper> resourceHelperProvider,
      Provider<FabricPrivacy> fabricPrivacyProvider,
      Provider<ObjectivesPlugin> objectivesPluginProvider,
      Provider<ReceiverStatusStore> receiverStatusStoreProvider,
      Provider<DateUtil> dateUtilProvider, Provider<SntpClient> sntpClientProvider) {
    return new ObjectivesFragment_MembersInjector(androidInjectorProvider, rxBusProvider, aapsLoggerProvider, spProvider, resourceHelperProvider, fabricPrivacyProvider, objectivesPluginProvider, receiverStatusStoreProvider, dateUtilProvider, sntpClientProvider);
  }

  @Override
  public void injectMembers(ObjectivesFragment instance) {
    DaggerFragment_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectRxBus(instance, rxBusProvider.get());
    injectAapsLogger(instance, aapsLoggerProvider.get());
    injectSp(instance, spProvider.get());
    injectResourceHelper(instance, resourceHelperProvider.get());
    injectFabricPrivacy(instance, fabricPrivacyProvider.get());
    injectObjectivesPlugin(instance, objectivesPluginProvider.get());
    injectReceiverStatusStore(instance, receiverStatusStoreProvider.get());
    injectDateUtil(instance, dateUtilProvider.get());
    injectSntpClient(instance, sntpClientProvider.get());
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesFragment.rxBus")
  public static void injectRxBus(ObjectivesFragment instance, RxBusWrapper rxBus) {
    instance.rxBus = rxBus;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesFragment.aapsLogger")
  public static void injectAapsLogger(ObjectivesFragment instance, AAPSLogger aapsLogger) {
    instance.aapsLogger = aapsLogger;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesFragment.sp")
  public static void injectSp(ObjectivesFragment instance, SP sp) {
    instance.sp = sp;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesFragment.resourceHelper")
  public static void injectResourceHelper(ObjectivesFragment instance,
      ResourceHelper resourceHelper) {
    instance.resourceHelper = resourceHelper;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesFragment.fabricPrivacy")
  public static void injectFabricPrivacy(ObjectivesFragment instance, FabricPrivacy fabricPrivacy) {
    instance.fabricPrivacy = fabricPrivacy;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesFragment.objectivesPlugin")
  public static void injectObjectivesPlugin(ObjectivesFragment instance,
      ObjectivesPlugin objectivesPlugin) {
    instance.objectivesPlugin = objectivesPlugin;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesFragment.receiverStatusStore")
  public static void injectReceiverStatusStore(ObjectivesFragment instance,
      ReceiverStatusStore receiverStatusStore) {
    instance.receiverStatusStore = receiverStatusStore;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesFragment.dateUtil")
  public static void injectDateUtil(ObjectivesFragment instance, DateUtil dateUtil) {
    instance.dateUtil = dateUtil;
  }

  @InjectedFieldSignature("info.nightscout.androidaps.plugins.constraints.objectives.ObjectivesFragment.sntpClient")
  public static void injectSntpClient(ObjectivesFragment instance, SntpClient sntpClient) {
    instance.sntpClient = sntpClient;
  }
}
